[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js":"5","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js":"6","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"9","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"10","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"11","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"12","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"13","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"15","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"16","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"17","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"18","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"19","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js":"20"},{"size":500,"mtime":1609255907946,"results":"21","hashOfConfig":"22"},{"size":472,"mtime":1610317230984,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1609255907947,"results":"24","hashOfConfig":"22"},{"size":5756,"mtime":1610336077388,"results":"25","hashOfConfig":"22"},{"size":4500,"mtime":1610324094583,"results":"26","hashOfConfig":"22"},{"size":315,"mtime":1610336027864,"results":"27","hashOfConfig":"22"},{"size":9508,"mtime":1610335668685,"results":"28","hashOfConfig":"22"},{"size":570,"mtime":1609255907945,"results":"29","hashOfConfig":"22"},{"size":814,"mtime":1610305380930,"results":"30","hashOfConfig":"22"},{"size":550,"mtime":1609255907945,"results":"31","hashOfConfig":"22"},{"size":3782,"mtime":1609255907946,"results":"32","hashOfConfig":"22"},{"size":767,"mtime":1610248130668,"results":"33","hashOfConfig":"22"},{"size":535,"mtime":1610299742890,"results":"34","hashOfConfig":"22"},{"size":17135,"mtime":1610335020403,"results":"35","hashOfConfig":"22"},{"size":4780,"mtime":1609255907945,"results":"36","hashOfConfig":"22"},{"size":354,"mtime":1610328014835,"results":"37","hashOfConfig":"22"},{"size":572,"mtime":1610334825309,"results":"38","hashOfConfig":"22"},{"size":3165,"mtime":1610335733952,"results":"39","hashOfConfig":"22"},{"size":1132,"mtime":1610335642469,"results":"40","hashOfConfig":"22"},{"size":8124,"mtime":1610329634878,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"11p3aqi",{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["90","91"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",["92","93"],"import React, {useState, useEffect} from 'react';\nimport './css_files/App.css';\nimport Mixbot from './Mixbot';\n\n\nfunction App() {\n    return(\n        <div className={\"body\"}>\n            <div className={\"title\"}>\n                <h1>MIXBOT</h1>\n                 <div className={\"credits\"}>\n                    <h3>An Open Source project by Parssa Kyanzadeh</h3> \n                 </div>\n            </div>\n            <Mixbot/>\n        </div>\n    );\n}\nexport default App;\n","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["94","95","96","97","98","99"],"/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js",["100","101","102","103","104","105"],"import React, { useEffect, useState } from 'react';\nimport youtubeApi from './api/youtube'\nimport videoDetailFinder from './api/youtubeVideoContent'\nimport { parse, end, toSeconds, pattern } from 'iso8601-duration';\n\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the foundSong prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID:\n */\nlet lastChosenID = \"\";\nexport default function TrackFinder({ name, artists, duration_ms, foundSong, trackID, trackImage }) {\n\n    const [songName, setSongName] = useState(name);\n    const [songArtists, setSongArtists] = useState(artists);\n    const [duration, setDuration] = useState(duration_ms);\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params: {\n                q: search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", {\n            params: {\n                id: videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;                                                     // a list of videos                 \n            for (let video = 0; video < videoList.length; video++) {                            // for each video in the videoList...\n                console.log(\">>>>>>>>\", chosenVideoID, \"<<<<<<<<<\");\n                const thisDetails = await videoDetail(videoList[video].id.videoId);             // Get details...\n                const thisDur = toMilli(thisDetails.data.items[0].contentDetails.duration);     // Get duration from details...\n                if (Math.abs(duration - thisDur) <= 1000) {                                     // If the duration is what we're looking for...\n                    console.log(\">>>>>>>> BINGO! <<<<<<<<<\");\n                    setChosenVideoID(videoList[video].id.videoId); // TODO FIX THIS OMG THIS IS AN ABSOLUTE ABUSE OF STATE.\n                    break;\n                }\n            }\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds(parse(ISO)) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(async () => {          // TODO FIX WHEN AVAILABLE\n        setSongArtists(artists);\n        setSongName(name);\n        setDuration(duration_ms);\n        lastChosenID = \"\";\n        const search = createSearchQuery();\n        await getYoutubeVideo(search);\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            let audioFormats = response.data;\n            foundSong(songName, songArtists, duration, audioFormats[0].url, trackID, trackImage);\n            setChosenVideoID(\"\");\n        });\n    }\n\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js",["106"],"/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["107","108","109","110","111","112"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["113"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["114","115","116"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["117","118"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["119","120","121","122","123","124","125","126","127","128","129","130"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["131","132","133"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nconst youtubeKey4 = \"AIzaSyDgc98evXaE_C01NhK6ls2n7ZDkR - vg6sU\"; // backupPlan\n\n\nexport const currentKey = youtubeKey4;","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",["134"],"/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js",["135","136","137","138","139","140"],"export const SectionType = {\n    DROP: 1,\n    REGULAR: 2,\n    COMEDOWN: 3,\n    BEGIN: 4,\n    UNSURE: 5\n}\n\nexport class Analyzer {\n    constructor() {\n        console.log(\"new analyzer created\");\n    }\n\n    /**\n     * Returns:\n     * {\n     *     songSections: All sections of the song, tagged with what they are\n            bars: Bars estimated through the data, used for syncing\n            startPos: Section the song should start\n     * }\n     */\n    analyzeSong(songData) {\n        console.log(\"analyzing data.\");\n        let analyzedBars = [];\n        let sectionArray = songData.sections;\n        let baselineLoudness = songData.track.loudness;\n        let allBars = songData.bars;\n        \n\n        let songSections = [];\n        let currSection = 0;\n\n        // song analysis variables\n        // let numDrops = 0;\n        // let mostConfidentDrop = 0;\n\n        // let numComedowns = 0;\n        // let mostConfidentComedown = 0;\n\n        // get an array of when all bars start\n        let barStartArray = []\n\n        let bar = allBars[0].duration;\n        let barConfidence = 0;\n        allBars.forEach(e => {\n            if (e.confidence > barConfidence) {\n                bar = e.duration;\n                barConfidence = e.confidence;\n            }\n        })\n        let barlength32 = bar * 2;\n        let songDuration = songData.track.duration;\n\n        let num32Bar = ((songDuration) / barlength32);\n\n        for (let a = 0; a <= num32Bar; a++) {\n            barStartArray.push(((a) * barlength32));\n        }\n\n        let calibrationArray = [];\n\n        let numCalibrationChunks = (songDuration) / bar;\n\n        for (let c = 0; c <= numCalibrationChunks; c++) {\n            calibrationArray.push(((c) * bar));\n        }\n\n\n        for (let b = 0; b < calibrationArray.length - 1; b++) {\n            // let barColor = (b % 2 ? \"rgba(255, 60, 54,0.05)\" : \"rgba(46, 255, 154,0.05)\");\n            let barRegion = {\n                start: calibrationArray[b],\n                end: calibrationArray[b + 1],\n                // color: barColor,\n                drag: false,\n                resize: false,\n                computed: {}\n            };\n            analyzedBars.push(barRegion); \n            // this.waveform.addRegion(barRegion);\n        }\n\n        sectionArray.forEach(e => {\n            currSection++;\n            let sectionType = SectionType.REGULAR;\n            let is32length = false;\n\n            let comparisonLoudness = (e.loudness - baselineLoudness) / baselineLoudness;\n\n            // IF BEGINNING OF SONG\n            if (songSections.length === 0) {\n                sectionType = SectionType.BEGIN;\n            }\n\n            // IF LOUD === DROP\n            if (comparisonLoudness < 0) {\n                sectionType = SectionType.DROP;\n            }\n\n            // IF LAST SONG WAS DROP AND DIFFERENTIAL OF THIS IS NEGATIVE === COMEDOWN\n            let diff = 0;\n            if (songSections.length > 0) {\n                diff = songSections[songSections.length - 1].computed.comparisonLoudness - comparisonLoudness;\n                if (songSections[songSections.length - 1].sectionType === SectionType.DROP) {\n                    if (sectionType === SectionType.DROP) {\n                        sectionType = SectionType.UNSURE;\n                    } else {\n                        sectionType = SectionType.COMEDOWN\n                    }\n                }\n            }\n\n            let beginpoint = e.start;\n            let endpoint = e.start + e.duration;\n            let closestEnd = this.closest(endpoint, barStartArray);\n            let closestBegin = this.closest(beginpoint, barStartArray);\n            let offsetBegin = closestBegin - beginpoint;\n            let offsetEnd = closestEnd - endpoint;\n            let acceptedConformEnd = false;\n            let acceptedConformBegin = false;\n\n            beginpoint = closestBegin;\n            endpoint = closestEnd;\n\n\n            let sizeComparison = ((endpoint - beginpoint) / barlength32).toPrecision(2); // checks if section is of calculated 32bar length\n            if (sizeComparison % 1) {\n                is32length = true;\n            }\n\n            let randomColor = 'rgba(162,254,231,0.3)';\n            switch (sectionType) {\n                case \"\":\n                    break;\n                case SectionType.BEGIN:\n                    // toLoop = true;\n                    randomColor = 'rgba(50,255,155,0.3)';\n                    if (is32length) {\n                        randomColor = 'rgba(100,255,55,0.3)';\n                    }\n                    break;\n                case SectionType.DROP:\n                    randomColor = 'rgba(237,61,155,0.3)';\n                    if (is32length) {\n                        randomColor = 'rgba(255,31,105,0.3)';\n                    }\n                    break;\n                case SectionType.COMEDOWN:\n                    randomColor = 'rgba(123,215,255,0.3)'\n                    if (is32length) {\n                        randomColor = 'rgba(50,150,255,0.3)'\n                    }\n                    break;\n                case SectionType.UNSURE:\n                    randomColor = 'rgba(34,1,255,0.2)'\n                    if (is32length) {\n                        randomColor = 'rgba(0,255,150,0.2)'\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            let goodForMix = false;\n            if (sectionType !== SectionType.DROP) {\n                if (comparisonLoudness > 0 && comparisonLoudness < 0.1) {\n                    randomColor = 'rgba(218, 165, 32,0.3)';\n                    goodForMix = true;\n                } else if (sectionType === SectionType.BEGIN) {\n                    randomColor = 'rgba(218, 165, 32,0.3)';\n                    goodForMix = true;\n                }\n            }\n            // ! THIS IS FOR UI PURPOSES REMOVE THIS WHEN TESTING\n            randomColor = 'rgba(0, 0, 0, 0)';\n\n            let analysisSection = {\n                sectionType: sectionType,\n                begin: beginpoint,\n                endpoint: endpoint,\n                computed: {\n                    comparisonLoudness: comparisonLoudness,\n                    differential: diff,\n                    sectionConfidence: e.confidence,\n                    conformedBegin: acceptedConformBegin,\n                    conformedEnd: acceptedConformEnd,\n                    oBegin: offsetBegin,\n                    oEnd: offsetEnd\n                },\n                sizeComparison: sizeComparison,\n                is32: is32length,\n                sectionColor: randomColor,\n                goodForMix: goodForMix\n            }\n            songSections.push(analysisSection);\n        })\n\n        let startingPos = 0; // TODO PASS THIS OUT\n\n        if (songSections.length > 2) {\n            // console.log(\"sec1:\", songSections[0].sizeComparison, \"sec2:\", songSections[1].sizeComparison);\n            // console.log(\"sec1:\", songSections[0].is32, \"sec2:\", songSections[1].is32);\n            if ((songSections[0].sizeComparison == 4) || (songSections[0].sizeComparison == 2 && songSections[1].sizeComparison == 2)) {\n                    startingPos= 0\n            } else if (songSections[0].sizeComparison == 2.0 && songSections[1].sizeComparison % 4 == 0) { // todo make this if songSections[1].sizeComparison is a multiple of 4\n                // console.log(\"mult of 4?\", songSections[1].sizeComparison % 4);\n                startingPos = songSections[0].endpoint;  \n            } \n        }\n\n        let finalAnalysis = {\n            songSections: songSections,\n            bars: calibrationArray,\n            startPos: startingPos\n        }\n\n        return finalAnalysis;\n    }\n\n\n    closest(needle, haystack) {\n        let closeGrain = 100000000000000;\n        let grainCloseness = 100000000000000;\n        haystack.forEach(grain => {\n            let thisCloseness = Math.abs(needle - grain)\n            if (Math.abs(needle - grain) < grainCloseness) {\n                grainCloseness = thisCloseness;\n                closeGrain = grain;\n            }\n        })\n        return closeGrain;\n    }\n}",{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":1,"column":16,"nodeType":"147","messageId":"148","endLine":1,"endColumn":24},{"ruleId":"145","severity":1,"message":"149","line":1,"column":26,"nodeType":"147","messageId":"148","endLine":1,"endColumn":35},{"ruleId":"145","severity":1,"message":"150","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":16},{"ruleId":"145","severity":1,"message":"151","line":6,"column":8,"nodeType":"147","messageId":"148","endLine":6,"endColumn":14},{"ruleId":"145","severity":1,"message":"152","line":8,"column":10,"nodeType":"147","messageId":"148","endLine":8,"endColumn":25},{"ruleId":"145","severity":1,"message":"153","line":8,"column":27,"nodeType":"147","messageId":"148","endLine":8,"endColumn":38},{"ruleId":"145","severity":1,"message":"154","line":48,"column":14,"nodeType":"147","messageId":"148","endLine":48,"endColumn":26},{"ruleId":"145","severity":1,"message":"155","line":65,"column":14,"nodeType":"147","messageId":"148","endLine":65,"endColumn":29},{"ruleId":"145","severity":1,"message":"156","line":1,"column":8,"nodeType":"147","messageId":"148","endLine":1,"endColumn":13},{"ruleId":"145","severity":1,"message":"157","line":4,"column":17,"nodeType":"147","messageId":"148","endLine":4,"endColumn":20},{"ruleId":"145","severity":1,"message":"158","line":4,"column":33,"nodeType":"147","messageId":"148","endLine":4,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":102,"column":8,"nodeType":"161","endLine":102,"endColumn":23,"suggestions":"162"},{"ruleId":"159","severity":1,"message":"163","line":104,"column":15,"nodeType":"164","endLine":111,"endColumn":6},{"ruleId":"159","severity":1,"message":"165","line":111,"column":8,"nodeType":"161","endLine":111,"endColumn":36,"suggestions":"166"},{"ruleId":"145","severity":1,"message":"167","line":1,"column":7,"nodeType":"147","messageId":"148","endLine":1,"endColumn":12},{"ruleId":"145","severity":1,"message":"153","line":4,"column":38,"nodeType":"147","messageId":"148","endLine":4,"endColumn":49},{"ruleId":"159","severity":1,"message":"168","line":39,"column":5,"nodeType":"147","endLine":39,"endColumn":14,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":50,"column":27,"nodeType":"172","messageId":"173","endLine":50,"endColumn":29},{"ruleId":"170","severity":1,"message":"171","line":50,"column":47,"nodeType":"172","messageId":"173","endLine":50,"endColumn":49},{"ruleId":"170","severity":1,"message":"171","line":53,"column":34,"nodeType":"172","messageId":"173","endLine":53,"endColumn":36},{"ruleId":"170","severity":1,"message":"171","line":53,"column":54,"nodeType":"172","messageId":"173","endLine":53,"endColumn":56},{"ruleId":"145","severity":1,"message":"146","line":1,"column":16,"nodeType":"147","messageId":"148","endLine":1,"endColumn":24},{"ruleId":"145","severity":1,"message":"174","line":9,"column":12,"nodeType":"147","messageId":"148","endLine":9,"endColumn":19},{"ruleId":"159","severity":1,"message":"175","line":50,"column":8,"nodeType":"161","endLine":50,"endColumn":13,"suggestions":"176"},{"ruleId":"159","severity":1,"message":"177","line":66,"column":8,"nodeType":"161","endLine":66,"endColumn":19,"suggestions":"178"},{"ruleId":"141","replacedBy":"179"},{"ruleId":"143","replacedBy":"180"},{"ruleId":"145","severity":1,"message":"181","line":2,"column":8,"nodeType":"147","messageId":"148","endLine":2,"endColumn":12},{"ruleId":"145","severity":1,"message":"182","line":98,"column":13,"nodeType":"147","messageId":"148","endLine":98,"endColumn":18},{"ruleId":"170","severity":1,"message":"183","line":186,"column":93,"nodeType":"172","messageId":"173","endLine":186,"endColumn":95},{"ruleId":"184","severity":1,"message":"185","line":339,"column":13,"nodeType":"186","endLine":339,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":340,"column":13,"nodeType":"186","endLine":340,"endColumn":45},{"ruleId":"184","severity":1,"message":"185","line":343,"column":13,"nodeType":"186","endLine":343,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":344,"column":13,"nodeType":"186","endLine":344,"endColumn":46},{"ruleId":"184","severity":1,"message":"185","line":346,"column":13,"nodeType":"186","endLine":346,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":347,"column":13,"nodeType":"186","endLine":347,"endColumn":45},{"ruleId":"184","severity":1,"message":"185","line":348,"column":13,"nodeType":"186","endLine":348,"endColumn":37},{"ruleId":"184","severity":1,"message":"185","line":349,"column":13,"nodeType":"186","endLine":349,"endColumn":46},{"ruleId":"184","severity":1,"message":"185","line":372,"column":9,"nodeType":"186","endLine":372,"endColumn":41},{"ruleId":"145","severity":1,"message":"187","line":1,"column":7,"nodeType":"147","messageId":"148","endLine":1,"endColumn":18},{"ruleId":"145","severity":1,"message":"188","line":3,"column":7,"nodeType":"147","messageId":"148","endLine":3,"endColumn":18},{"ruleId":"145","severity":1,"message":"189","line":5,"column":7,"nodeType":"147","messageId":"148","endLine":5,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":101,"column":35,"nodeType":"172","messageId":"173","endLine":101,"endColumn":37},{"ruleId":"145","severity":1,"message":"190","line":84,"column":13,"nodeType":"147","messageId":"148","endLine":84,"endColumn":24},{"ruleId":"170","severity":1,"message":"171","line":203,"column":49,"nodeType":"172","messageId":"173","endLine":203,"endColumn":51},{"ruleId":"170","severity":1,"message":"171","line":203,"column":90,"nodeType":"172","messageId":"173","endLine":203,"endColumn":92},{"ruleId":"170","severity":1,"message":"171","line":203,"column":129,"nodeType":"172","messageId":"173","endLine":203,"endColumn":131},{"ruleId":"170","severity":1,"message":"171","line":205,"column":55,"nodeType":"172","messageId":"173","endLine":205,"endColumn":57},{"ruleId":"170","severity":1,"message":"171","line":205,"column":100,"nodeType":"172","messageId":"173","endLine":205,"endColumn":102},"no-native-reassign",["191"],"no-negated-in-lhs",["192"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Dropdown' is defined but never used.","'Detail' is defined but never used.","'nextSongInQueue' is defined but never used.","'thoughtType' is defined but never used.","'genreChanged' is defined but never used.","'playlistChanged' is defined but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.","ArrayExpression",["193"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createSearchQuery' and 'getYoutubeVideo'. Either include them or remove the dependency array.",["194"],"'cred1' is assigned a value but never used.","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["195"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.",["196"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["197"],["191"],["192"],"'Knob' is defined but never used.","'dummy' is assigned a value but never used.","Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'youtubeKey1' is assigned a value but never used.","'youtubeKey2' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","'currSection' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"208","text":"209"},"Update the dependencies array to be: [name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",{"range":"210","text":"211"},"Add dependencies array: [clock]",{"range":"212","text":"213"},"Update the dependencies array to be: [url, volume]",{"range":"214","text":"215"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"216","text":"217"},[3772,3787],"[chosenVideoID, videoIDtoMP3]",[4065,4093],"[name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",[1369,1369],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]"]