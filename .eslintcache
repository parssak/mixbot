[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"5","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"6","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"9","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"10","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"11","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"12","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"13","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"15","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"16","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"17","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js":"18","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js":"19","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js":"20","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js":"21"},{"size":500,"mtime":1609255907946,"results":"22","hashOfConfig":"23"},{"size":470,"mtime":1610471836858,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1609255907947,"results":"25","hashOfConfig":"23"},{"size":6161,"mtime":1610510007911,"results":"26","hashOfConfig":"23"},{"size":9307,"mtime":1610565018878,"results":"27","hashOfConfig":"23"},{"size":570,"mtime":1609255907945,"results":"28","hashOfConfig":"23"},{"size":814,"mtime":1610305380930,"results":"29","hashOfConfig":"23"},{"size":550,"mtime":1609255907945,"results":"30","hashOfConfig":"23"},{"size":3782,"mtime":1609255907946,"results":"31","hashOfConfig":"23"},{"size":767,"mtime":1610248130668,"results":"32","hashOfConfig":"23"},{"size":535,"mtime":1610299742890,"results":"33","hashOfConfig":"23"},{"size":16817,"mtime":1610564300901,"results":"34","hashOfConfig":"23"},{"size":4780,"mtime":1609255907945,"results":"35","hashOfConfig":"23"},{"size":354,"mtime":1610328014835,"results":"36","hashOfConfig":"23"},{"size":608,"mtime":1610376480379,"results":"37","hashOfConfig":"23"},{"size":5067,"mtime":1610495784751,"results":"38","hashOfConfig":"23"},{"size":1120,"mtime":1610376717223,"results":"39","hashOfConfig":"23"},{"size":8257,"mtime":1610402901089,"results":"40","hashOfConfig":"23"},{"size":2340,"mtime":1610492022385,"results":"41","hashOfConfig":"23"},{"size":5093,"mtime":1610506622420,"results":"42","hashOfConfig":"23"},{"size":315,"mtime":1610491225550,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"11p3aqi",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"46"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["97","98"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",["99","100"],"import React, {useState, useEffect} from 'react';\nimport './css_files/App.css';\nimport Mixbot from './Mixbot';\n\nfunction App() {\n    return(\n        <div className={\"body\"}>\n            <div className={\"title\"}>\n                <h1>MIXBOT</h1>\n                <div className={\"credits\"}>\n                    <h3>An Open Source project by Parssa Kyanzadeh</h3> \n                 </div>\n            </div>\n            <Mixbot/>\n        </div>\n    );\n}\nexport default App;\n","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["101","102","103","104"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Credentials } from './api/Credentials';\nimport axios from 'axios';\nimport Listbox from \"./frontend_components/Listbox\";\nimport { Analyzer } from './helper_classes/Analyzer';\nimport TrackFinder from \"./helper_classes/TrackFinder\";\nimport { thoughtType, trackAlreadyIn, tracklistSize } from \"./Mixbot\";\nimport { Gateway } from './helper_classes/Gateway';\n\nconst euroHouseID = \"2818tC1Ba59cftJJqjWKZi\";\nlet gateway = new Gateway();\nlet offset = 0;\n\nfunction TrackSelector({ addToQueue, addMoreSongs, newThought }) {\n    const spotify = Credentials();\n    const [token, setToken] = useState('');\n    const [playlist, setPlaylist] = useState({ selectedPlaylist: euroHouseID, listOfPlaylistFromAPI: [] });\n    const [tracks, setTracks] = useState({ selectedTrack: '', listOfTracksFromAPI: [] });\n    const [trackDetail, setTrackDetail] = useState(null);\n\n    useEffect(() => {                                       // used for verification\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                setToken(tokenResponse.data.access_token);\n            });\n\n    }, [spotify.ClientId, spotify.ClientSecret]);\n\n    \n\n    function playlistSearchClicked(e) {\n        e.preventDefault();\n        axios(`https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=40`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }, \n            params: {\n                offset: offset\n            }\n        }).then(tracksResponse => {\n            console.log(\"----------------------------\");\n            console.log(\"----------------------------- GOT SONGS, OFFSETTING FROM\", offset);\n            console.log(\"----------------------------\");\n            offset += 40;\n            setTracks({\n                selectedTrack: tracks.selectedTrack,\n                listOfTracksFromAPI: tracksResponse.data.items\n            })\n        });\n    }\n\n    const selectTrack = useCallback((val) => {\n        console.log(\"VAL IS\", val);\n        const currentTracks = [...tracks.listOfTracksFromAPI];\n        const trackInfo = currentTracks.filter(t => t.track.id === val);\n        if (!trackAlreadyIn(trackInfo[0].track.name)) {\n            console.log(\"setting track detail:\", trackInfo[0].track);\n            console.log(\"setting track detail BACKUP:\", trackInfo);\n            setTrackDetail(trackInfo[0].track);\n            return true;\n        }\n        return false;\n    });\n\n    const chooseSong = useCallback((choiceSelections) => {\n        let selected = choiceSelections[Math.floor(Math.random() * (choiceSelections.length - 1))];\n        selectTrack(selected.track.id);\n    });\n\n    useEffect(() => {\n        if (tracks.listOfTracksFromAPI.length > 0) {\n            console.log(\"Got some songs!\");\n            if (trackDetail == null && addMoreSongs) {\n                console.log(\"ADDING ANOTHER SONG!\");\n                console.log(tracks);\n                chooseSong(tracks.listOfTracksFromAPI)\n            }\n        }\n    }, [tracks, trackDetail, addMoreSongs, chooseSong])\n\n\n    async function addSongToTracklist(songName, songArtists, duration, songURL, trackID, trackImage, youtubeVideoID, fromDatabase) {\n        if (!trackAlreadyIn(songName)) {\n            await getAudioAnalysis(trackID, songName, songArtists, duration, songURL, trackImage, youtubeVideoID, fromDatabase);\n        } else {\n            setTrackDetail(null);\n        }\n    }\n\n    async function addSongAnalysisToDatabase(songID, songAnalysis, songName) {\n        let dbAnalysis = {\n            songID: songID,\n            songName: songName,\n            analysis: songAnalysis\n        }\n        await gateway.addToAnalysis(dbAnalysis);\n    }\n\n    const getAudioAnalysis = async (id, songName, songArtists, duration, songURL, trackImage, youtubeVideoID, fromDatabase) => {\n        let analysisInDB = await gateway.checkAnalysisDB(id);\n\n        if (!analysisInDB) {\n            console.log(\">>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<>>>>>>>>>>>>>>><<<<<<<<<<<<<<<>>>>>>>>>>>>>\");\n            console.log(analysisInDB);\n            let rawAnalysis = await gateway.getSpotifyAnalysis(id, token);\n            let songData = rawAnalysis.data;\n            let analyzer = new Analyzer();\n            let analyzedData = analyzer.analyzeSong(songData);\n            analysisInDB = analyzedData;\n            addSongAnalysisToDatabase(id, analyzedData, songName);\n        } else {\n            console.log(\"!!!!!!!>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<>>>>>>>>>>>>>>><<<<<<<<<<<<<<<>>>>>>>>>>>>>\");\n            console.log(analysisInDB);\n        }\n        addToQueue(songName, songArtists, duration, songURL, analysisInDB, trackImage, id, youtubeVideoID, fromDatabase);\n        setTrackDetail(null);\n    }\n\n    const couldntBeFound = () => {\n        const think = \"Unable to add \" + trackDetail.name;\n        newThought(think, thoughtType.FAILURE);\n        setTrackDetail(null);\n    }\n\n    return (\n        <div>\n            <form onSubmit={playlistSearchClicked}>\n                {tracklistSize() === 0 && <button type='submit' className=\"begin-mix\">BEGIN MIX</button>}\n                <div style={{ marginTop: \"4em\" }}>\n                    {/* <Listbox items={tracks.listOfTracksFromAPI} clicked={selectTrack} /> */}\n                    {trackDetail && <TrackFinder name={trackDetail.name}\n                        artists={trackDetail.artists}\n                        duration_ms={trackDetail.duration_ms}\n                        trackID={trackDetail.id}\n                        trackImage={trackDetail.album.images[1]}\n                        foundSong={addSongToTracklist}\n                        cantFind={couldntBeFound}/>}\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default TrackSelector;\n","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["105","106","107","108","109"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],["110","111"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["112"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["113","114","115"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["116","117"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["118","119","120","121","122","123","124","125","126","127","128"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["129","130","131"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nconst youtubeKey4 = \"AIzaSyDgc98evXaE_C01NhK6ls2n7ZDkR - vg6sU\"; // backupPlan\n\n\nexport const currentKey = youtubeKey4;","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",["132"],"import React, { useState } from 'react';\nimport TrackSelector from \"./TrackSelector\";\nimport TrackPlayer from \"./TrackPlayer\";\nimport QueueBox from \"./frontend_components/Queue\";\nimport Brain from \"./Brain\";\nimport axios from 'axios';\n\nlet tracklist = [];\nlet upcomingSongs = [];\nlet alreadyPlayed = [];\n\nconst addSongRefURL = 'http://localhost:8080/addReference'\n\n// --- Global Functions ---\nexport function trackAlreadyIn(trackName) {\n    console.log(\">>>>>>>>>>>>>>> checking if track is already in....\", trackName);\n    for (const trackObj of tracklist) {\n        console.log(trackObj)\n        if (trackObj.songName === trackName)\n            return true;\n    }\n    return false;\n}\n\nexport function loadTrack() {\n    let nextSong = null;\n    if (upcomingSongs.length !== 0) {\n        nextSong = upcomingSongs[0].body;\n        alreadyPlayed.push(nextSong);\n        upcomingSongs.shift();\n    }\n    return nextSong;\n}\n\nexport function nextSongInQueue() {\n    return upcomingSongs[0] || null;\n}\n\nexport function tracklistSize() {\n    return tracklist.length;\n}\n\nexport const thoughtType = {\n    NEUTRAL: 1,\n    SUCCESS: 2,\n    FAILURE: 3,\n    MIX: 4\n}\n\nexport default function Mixbot() {\n    const [thoughts, setThoughts] = useState([]);\n\n    function newThought(input, type = thoughtType.NEUTRAL) {\n        // console.log(\"1. new thought added\", input);\n        let shouldShow = true;\n        if (thoughts.length > 0 && thoughts[0].body === input) {\n            shouldShow = false;\n        }\n        setThoughts([{ id: \"THOUGHT-\" + thoughts.length, body: input, type: type, display: shouldShow }, ...thoughts]);\n        // console.log(\"2. new thought added\", thoughts);\n    }\n\n    /**\n     * \n     * @param {*} songName: name of song\n     * @param {*} songArtists : array of artists of song\n     * @param {*} duration_ms: duration in ms \n     * @param {*} songURL: url to the temp reference link \n     * @param {*} analysis: raw spotify analysis \n     * @param {*} trackImage: img of album art \n     * @param {*} songID:  ID OF THE SPOTIFY SONG\n     * @param {*} videoID:  ID OF THE CORRESPONDING YT ID\n     * @param {boolean} fromDatabase: true if fetched yt id from database\n     */\n    async function addToQueue(songName, songArtists, duration_ms, songURL, analysis, trackImage, songID, videoID, fromDatabase) {\n\n        // TODO MAKE THIS ONLY HAPPEN IF NOT FOUND IN DATABASE\n        if (analysis !== \"NOTFOUND\") {\n            if (!fromDatabase) {\n                console.log(\"not in db yet, adding it...\");\n\n                let correctedArtists = [];\n                songArtists.forEach(artist => correctedArtists.push(artist.name));\n\n                let songRefEntry = {\n                    songID: songID, // spotify id\n                    videoID: videoID, // youtube videoID\n                    name: songName,\n                    artists: correctedArtists,\n                    duration: duration_ms,\n                }\n                addSongRefDB(songRefEntry);\n            } else {\n                // console.log(\"got it from db!\");\n            }\n          \n            // Add it to the DB // todo\n            // let databaseEntry = {\n            // songID: songID,\n            // songName: songName,\n            // analyzed: analyzedData,\n            // }\n\n            // addTrackAnalysisDB(databaseEntry);\n\n        }\n\n        const newSong = {\n            songName: songName,\n            songArtists: songArtists,\n            duration_ms: duration_ms,\n            songURL: songURL,\n            songAnalysis: analysis,\n            trackImage: trackImage\n        }\n        // console.log(\">>>(MIXBOT): NEW SONG IS:\", newSong);\n        // console.log(\">>>(MIXBOT): ANALYSIS:\", analysis);\n        let packageSong = { id: \"tracklist\" + tracklist.length, body: newSong }\n        // console.log(\">>>(MIXBOT): PACKAGED SONG:\", packageSong);\n        tracklist.push(packageSong);\n        // console.log(\">>>(MIXBOT): ADDED TO TRACKLIST:\", tracklist);\n        upcomingSongs.push(packageSong);\n        // console.log(\">>>(MIXBOT): ADDED TO UPCOMING SONGS:\", upcomingSongs);\n        const think = `Added ${songName} to the tracklist`;\n        // console.log(\">>>(MIXBOT): ABOUT TO THINK:\", think);\n        newThought(think, thoughtType.NEUTRAL);\n    }\n\n    // function addTrackAnalysisDB(entry) {\n    //     axios.create({\n    //         baseURL: 'http://localhost:8080',\n    //         headers: {}\n    //     }).get('/addAnalysis', {\n    //         params: {\n    //             data: entry\n    //         },\n    //     })\n    // }\n\n    function addSongRefDB(entry) {\n        axios.get(addSongRefURL, {\n            params: { data: entry }\n        });\n    }\n\n\n    return (\n        <>\n            <TrackPlayer newThought={newThought} />\n            <div className=\"mixbot-dropdowns\">\n                <Brain decisions={thoughts} />\n                {tracklist.length == 0 ? null : <QueueBox items={tracklist} />}\n            </div>\n            <TrackSelector addToQueue={addToQueue} addMoreSongs={upcomingSongs.length < 2} newThought={ newThought}/>\n        </>\n    )\n}\n","/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js",["133","134","135","136","137"],"import React, { useEffect, useState } from 'react';\nimport youtubeApi from '../api/youtube'\nimport videoDetailFinder from '../api/youtubeVideoContent'\nimport { parse, end, toSeconds, pattern } from 'iso8601-duration';\nimport { Gateway } from './Gateway';\n\nlet gateway = new Gateway();\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the { foundSong } prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID: id of the spotify song\n */\nlet lastChosenID = \"\";\nlet fromDatabase = false;\nexport default function TrackFinder({ name, artists, duration_ms, foundSong, trackID, trackImage, cantFind }) {\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params: {\n                q: search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", {\n            params: {\n                id: videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;                                                     // a list of videos                 \n            for (let video = 0; video < videoList.length; video++) {                            // for each video in the videoList...\n                const thisDetails = await videoDetail(videoList[video].id.videoId);             // Get details...\n                const thisDur = toMilli(thisDetails.data.items[0].contentDetails.duration);     // Get duration from details...\n                if (Math.abs(duration_ms - thisDur) <= 1000) {                                     // If the duration is what we're looking for...\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n            if (!chosenVideoID) {\n                let whitelistObj = {\n                    songID: trackID,\n                    songName: name,\n                    songArtists: artists,\n                    expectedDuration: duration_ms,\n                }\n\n                await gateway.addToWhitelist(whitelistObj);\n                cantFind();\n            }\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds(parse(ISO)) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(() => {        \n        async function findYoutubeID() {\n            const result = await gateway.checkReferenceDB(trackID);\n            lastChosenID = \"\";\n            if (result === \"\") {\n                const whitelistResult = await gateway.checkWhitelistDB(trackID);\n                if (whitelistResult === \"\") {\n                    fromDatabase = false;\n                    const search = createSearchQuery();\n                    await getYoutubeVideo(search);\n                } else {\n                    cantFind();\n                }\n            } else {\n                fromDatabase = true;\n                setChosenVideoID(result.videoID);\n            }\n        }\n\n        findYoutubeID();\n\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            let audioFormats = response.data;\n            foundSong(name, artists, duration_ms, audioFormats[0].url, trackID, trackImage, videoID, fromDatabase);\n            setChosenVideoID(\"\");\n        });\n    }\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js",["138"],"const cred1 = {\n    ClientId: '2f960da39c8b42d9a8dc394d02b97db0',\n    ClientSecret: '860fabcadd034f1d9368e7ca7791de73'\n}\n\n\nconst cred2 = {\n    ClientId: '75cbbf8c1ff14b9abe3cbfe6924fb5f0',\n    ClientSecret: 'da55e142b302460cab9b737153b93eb4'\n}\n\n\nfunction Credentials() {\n    return cred2;\n}\n\nexport { Credentials };",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":16,"nodeType":"145","messageId":"146","endLine":1,"endColumn":24},{"ruleId":"143","severity":1,"message":"147","line":1,"column":26,"nodeType":"145","messageId":"146","endLine":1,"endColumn":35},{"ruleId":"143","severity":1,"message":"148","line":4,"column":8,"nodeType":"145","messageId":"146","endLine":4,"endColumn":15},{"ruleId":"143","severity":1,"message":"149","line":17,"column":22,"nodeType":"145","messageId":"146","endLine":17,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":60,"column":25,"nodeType":"145","endLine":60,"endColumn":36},{"ruleId":"150","severity":1,"message":"151","line":73,"column":24,"nodeType":"145","endLine":73,"endColumn":35},{"ruleId":"150","severity":1,"message":"152","line":42,"column":5,"nodeType":"145","endLine":42,"endColumn":14,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":61,"column":27,"nodeType":"156","messageId":"157","endLine":61,"endColumn":29},{"ruleId":"154","severity":1,"message":"155","line":61,"column":47,"nodeType":"156","messageId":"157","endLine":61,"endColumn":49},{"ruleId":"154","severity":1,"message":"155","line":64,"column":34,"nodeType":"156","messageId":"157","endLine":64,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":64,"column":54,"nodeType":"156","messageId":"157","endLine":64,"endColumn":56},{"ruleId":"139","replacedBy":"158"},{"ruleId":"141","replacedBy":"159"},{"ruleId":"143","severity":1,"message":"144","line":1,"column":16,"nodeType":"145","messageId":"146","endLine":1,"endColumn":24},{"ruleId":"143","severity":1,"message":"160","line":9,"column":12,"nodeType":"145","messageId":"146","endLine":9,"endColumn":19},{"ruleId":"150","severity":1,"message":"161","line":50,"column":8,"nodeType":"162","endLine":50,"endColumn":13,"suggestions":"163"},{"ruleId":"150","severity":1,"message":"164","line":66,"column":8,"nodeType":"162","endLine":66,"endColumn":19,"suggestions":"165"},{"ruleId":"139","replacedBy":"166"},{"ruleId":"141","replacedBy":"167"},{"ruleId":"143","severity":1,"message":"168","line":2,"column":8,"nodeType":"145","messageId":"146","endLine":2,"endColumn":12},{"ruleId":"154","severity":1,"message":"169","line":164,"column":93,"nodeType":"156","messageId":"157","endLine":164,"endColumn":95},{"ruleId":"170","severity":1,"message":"171","line":330,"column":13,"nodeType":"172","endLine":330,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":331,"column":13,"nodeType":"172","endLine":331,"endColumn":45},{"ruleId":"170","severity":1,"message":"171","line":334,"column":13,"nodeType":"172","endLine":334,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":335,"column":13,"nodeType":"172","endLine":335,"endColumn":46},{"ruleId":"170","severity":1,"message":"171","line":337,"column":13,"nodeType":"172","endLine":337,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":338,"column":13,"nodeType":"172","endLine":338,"endColumn":45},{"ruleId":"170","severity":1,"message":"171","line":339,"column":13,"nodeType":"172","endLine":339,"endColumn":37},{"ruleId":"170","severity":1,"message":"171","line":340,"column":13,"nodeType":"172","endLine":340,"endColumn":46},{"ruleId":"170","severity":1,"message":"171","line":363,"column":9,"nodeType":"172","endLine":363,"endColumn":41},{"ruleId":"143","severity":1,"message":"173","line":1,"column":7,"nodeType":"145","messageId":"146","endLine":1,"endColumn":18},{"ruleId":"143","severity":1,"message":"174","line":3,"column":7,"nodeType":"145","messageId":"146","endLine":3,"endColumn":18},{"ruleId":"143","severity":1,"message":"175","line":5,"column":7,"nodeType":"145","messageId":"146","endLine":5,"endColumn":18},{"ruleId":"154","severity":1,"message":"155","line":152,"column":35,"nodeType":"156","messageId":"157","endLine":152,"endColumn":37},{"ruleId":"143","severity":1,"message":"176","line":1,"column":8,"nodeType":"145","messageId":"146","endLine":1,"endColumn":13},{"ruleId":"143","severity":1,"message":"177","line":4,"column":17,"nodeType":"145","messageId":"146","endLine":4,"endColumn":20},{"ruleId":"143","severity":1,"message":"178","line":4,"column":33,"nodeType":"145","messageId":"146","endLine":4,"endColumn":40},{"ruleId":"150","severity":1,"message":"179","line":110,"column":8,"nodeType":"162","endLine":110,"endColumn":23,"suggestions":"180"},{"ruleId":"150","severity":1,"message":"181","line":133,"column":8,"nodeType":"162","endLine":133,"endColumn":36,"suggestions":"182"},{"ruleId":"143","severity":1,"message":"183","line":1,"column":7,"nodeType":"145","messageId":"146","endLine":1,"endColumn":12},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Listbox' is defined but never used.","'setPlaylist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["186"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["184"],["185"],"'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["187"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["188"],["184"],["185"],"'Knob' is defined but never used.","Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'youtubeKey1' is assigned a value but never used.","'youtubeKey2' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.",["189"],"React Hook useEffect has missing dependencies: 'cantFind', 'createSearchQuery', 'getYoutubeVideo', and 'trackID'. Either include them or remove the dependency array. If 'cantFind' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["190"],"'cred1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Add dependencies array: [clock]",{"range":"201","text":"202"},"Update the dependencies array to be: [url, volume]",{"range":"203","text":"204"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"205","text":"206"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"207","text":"208"},"Update the dependencies array to be: [name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]",{"range":"209","text":"210"},[1699,1699],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]",[3903,3918],"[chosenVideoID, videoIDtoMP3]",[4641,4669],"[name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]"]