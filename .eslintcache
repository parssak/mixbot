[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"5","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"6","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"9","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"10","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"11","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"12","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"13","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"15","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"16","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"17","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js":"18","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js":"19","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js":"20","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js":"21","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/MixConfig.js":"22","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/UpdateMixBot.js":"23"},{"size":500,"mtime":1609255907946,"results":"24","hashOfConfig":"25"},{"size":1592,"mtime":1610728066386,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1609255907947,"results":"27","hashOfConfig":"25"},{"size":7669,"mtime":1610670457934,"results":"28","hashOfConfig":"25"},{"size":9931,"mtime":1610754312994,"results":"29","hashOfConfig":"25"},{"size":570,"mtime":1609255907945,"results":"30","hashOfConfig":"25"},{"size":814,"mtime":1610305380930,"results":"31","hashOfConfig":"25"},{"size":550,"mtime":1609255907945,"results":"32","hashOfConfig":"25"},{"size":3782,"mtime":1609255907946,"results":"33","hashOfConfig":"25"},{"size":767,"mtime":1610248130668,"results":"34","hashOfConfig":"25"},{"size":535,"mtime":1610299742890,"results":"35","hashOfConfig":"25"},{"size":18044,"mtime":1610754180139,"results":"36","hashOfConfig":"25"},{"size":4780,"mtime":1609255907945,"results":"37","hashOfConfig":"25"},{"size":354,"mtime":1610592920479,"results":"38","hashOfConfig":"25"},{"size":792,"mtime":1610657601273,"results":"39","hashOfConfig":"25"},{"size":5356,"mtime":1610732047321,"results":"40","hashOfConfig":"25"},{"size":1153,"mtime":1610591571713,"results":"41","hashOfConfig":"25"},{"size":8257,"mtime":1610402901089,"results":"42","hashOfConfig":"25"},{"size":2831,"mtime":1610672242111,"results":"43","hashOfConfig":"25"},{"size":5102,"mtime":1610658737410,"results":"44","hashOfConfig":"25"},{"size":315,"mtime":1610491225550,"results":"45","hashOfConfig":"25"},{"size":678,"mtime":1610753297490,"results":"46","hashOfConfig":"25"},{"size":863,"mtime":1610678156022,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"11p3aqi",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["104","105"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",[],"/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["106","107"],"import React, { useState, useEffect, useCallback } from 'react';\nimport { Credentials } from './api/Credentials';\nimport axios from 'axios';\nimport TrackFinder from \"./helper_classes/TrackFinder\";\nimport { thoughtType, trackAlreadyIn, tracklistSize } from \"./Mixbot\";\nimport { Gateway } from './helper_classes/Gateway';\n\nconst MixType = {\n    EURO_HOUSE: 1,\n    CHILL_HOUSE: 2,\n    TECH_HOUSE: 3,\n}\n\nlet currentMix = null; // meant to be a mixType\nconst euroHouseMix_1 = \"2818tC1Ba59cftJJqjWKZi\";\nconst euroHouseMix_2 = \"1fWDDXepy50hFXLhwGR5xP\";\nconst chillMix_1 = \"52yAobXW9CokfKnLhe3C8Z\";\nconst chillMix_2 = \"6el7EnAXJJ2kvnoBDvWXvk\";\nconst techHouseMix_1 = \"7HRYveKYzLJFqb1PTJejoL\";\n\nlet chosenPlaylist = null;\n\nlet gateway = new Gateway();\nlet offset = 0;\n\nfunction getMixText() {\n    switch (currentMix) {\n        case MixType.EURO_HOUSE:\n            return \"Euro House Mix\";\n        case MixType.TECH_HOUSE:\n            return \"Tech House Mix\";\n        case MixType.CHILL_HOUSE:\n            return \"Chill House Mix\";\n        default:\n            break;\n    }\n}\n\nfunction TrackSelector({ addToQueue, addMoreSongs, newThought, mixChosen }) {\n    const spotify = Credentials();\n    const [token, setToken] = useState('');\n    const [playlist, setPlaylist] = useState({ selectedPlaylist: null, listOfPlaylistFromAPI: [] });\n    const [tracks, setTracks] = useState({ selectedTrack: '', listOfTracksFromAPI: [] });\n    const [trackDetail, setTrackDetail] = useState(null);\n    const [chosenMix, setChosenMix] = useState(false);\n\n    useEffect(() => {                                       // used for verification\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                setToken(tokenResponse.data.access_token);\n            });\n\n    }, [spotify.ClientId, spotify.ClientSecret]);\n\n\n\n    function changeChosen(playlist) {\n        if (playlist === 1) { // euro house\n            currentMix = MixType.EURO_HOUSE;\n            chosenPlaylist = Math.random() > 0.5 ? euroHouseMix_1 : euroHouseMix_2;\n        } else if (playlist === 2) {\n            currentMix = MixType.CHILL_HOUSE;\n            chosenPlaylist = Math.random() > 0.5 ? chillMix_1 : chillMix_2;\n        } else {\n            currentMix = MixType.TECH_HOUSE;\n            chosenPlaylist = techHouseMix_1;\n        }\n\n        setPlaylist({ selectedPlaylist: chosenPlaylist });\n        setChosenMix(true);\n    }    \n\n    function playlistSearchClicked(e) {\n        e.preventDefault();\n        axios(`https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=40`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }, \n            params: {\n                offset: offset\n            }\n        }).then(tracksResponse => {\n            // console.log(\"----------------------------- GOT SONGS, OFFSETTING FROM\", offset);\n            // offset += 40;\n            setTracks({\n                selectedTrack: tracks.selectedTrack,\n                listOfTracksFromAPI: tracksResponse.data.items\n            })\n\n            mixChosen(getMixText());\n        });\n    }\n\n    const selectTrack = useCallback((val) => {\n        if (!trackAlreadyIn(val)) {\n            const currentTracks = [...tracks.listOfTracksFromAPI];\n            const trackInfo = currentTracks.filter(t => t.track.id === val);\n            setTrackDetail(trackInfo[0].track);\n        }\n    });\n\n    const chooseSong = useCallback((choiceSelections) => {\n        let selected = choiceSelections[Math.floor(Math.random() * (choiceSelections.length - 1))];\n        console.log(\"random choice:\", selected);\n        selectTrack(selected.track.id);\n    });\n\n    useEffect(() => {\n        if (tracks.listOfTracksFromAPI.length > 0) {\n            // console.log(\"We have songs!\");\n            if (trackDetail == null && addMoreSongs) {\n                // console.log(\"Adding another song!\");\n                chooseSong(tracks.listOfTracksFromAPI)\n            }\n        }\n    }, [tracks, trackDetail, addMoreSongs, chooseSong])\n\n    // TODO FIXING DUPLICATE SONG BUG\n    async function addSongToTracklist(songName, songArtists, duration, songURL, trackID, trackImage, youtubeVideoID, fromDatabase) {\n        // console.log(\">>>>>>>>>>>>>>>>>> 2\");\n        if (!trackAlreadyIn(trackID)) {\n            // console.log(\">>>>>>>>>>>>>>>>>> 2 NOT IN YET GETTING ANALYSIS\", songName);\n            await getAudioAnalysis(trackID, songName, songArtists, duration, songURL, trackImage, youtubeVideoID, fromDatabase);\n        } else {\n            // console.log(\">>>>>>>>>>>>>>>>>> 2 ALREADY IN SETTING DETAIL NULL\", songName);\n            setTrackDetail(null);\n        }\n    }\n\n    async function addSongAnalysisToDatabase(dbObj) {\n        // let dbAnalysis = {\n        //     songID: songID,\n        //     songName: songName,\n        //     analysis: songAnalysis\n        // }\n        await gateway.addToAnalysis(dbObj);\n    }\n\n    const getAudioAnalysis = async (id, songName, songArtists, duration, songURL, trackImage, youtubeVideoID, fromDatabase) => {\n        let analysisInDB = await gateway.checkAnalysisDB(id);\n        let takenFromDB = !analysisInDB;\n        if (takenFromDB) {\n            analysisInDB = await gateway.getSpotifyAnalysis(id, token);\n            let dbAnalysis = {\n                songID: id,\n                songName: songName,\n                analysis: analysisInDB\n            }\n            analysisInDB = dbAnalysis;\n            // let songData = rawAnalysis.data;\n            // let analyzer = new Analyzer();\n            \n            // analysisInDB = analyzedData;\n        }\n        \n        await addToQueue(songName, songArtists, duration, songURL, analysisInDB, trackImage, id, youtubeVideoID, fromDatabase); // ! todo added \"Await\" this \n        await addSongAnalysisToDatabase(analysisInDB);\n        setTrackDetail(null);\n    }\n\n    const couldntBeFound = (alreadyDB) => {\n        if (!alreadyDB) {\n            const think = \"Unable to add \" + trackDetail.name;\n            newThought(think, thoughtType.FAILURE);\n        }\n        setTrackDetail(null);\n    }\n\n    return (\n        <div className=\"selector-wrapper\">\n\n            <h1>Select a mix</h1>\n            {chosenMix && <h2>{getMixText()}</h2>}\n            <div className=\"playlist-select\">\n                {tracklistSize() === 0 && <button onClick={() => changeChosen(1)}>EURO HOUSE</button>}\n                {tracklistSize() === 0 && <button onClick={() => changeChosen(2)}>CHILL HOUSE</button>}\n                {tracklistSize() === 0 && <button onClick={() => changeChosen(3)}>TECH HOUSE</button>}\n            </div>\n            \n            <form onSubmit={playlistSearchClicked}>\n                {chosenMix && tracklistSize() === 0 && <button className=\"begin-mix\">Begin mix</button>}\n                <div style={{ marginTop: \"4em\" }}>\n                    {trackDetail && <TrackFinder name={trackDetail.name}\n                        artists={trackDetail.artists}\n                        duration_ms={trackDetail.duration_ms}\n                        trackID={trackDetail.id}\n                        trackImage={trackDetail.album.images[1]}\n                        foundSong={addSongToTracklist}\n                        cantFind={couldntBeFound}/>}\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default TrackSelector;\n","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["108","109","110","111","112"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],["113","114"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],["115","116"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["117"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["118","119","120"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["121","122"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["123","124","125","126","127","128","129","130","131","132"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["133","134","135"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nconst youtubeKey4 = \"AIzaSyDgc98evXaE_C01NhK6ls2n7ZDkR - vg6sU\"; // backupPlan\n\n\nexport const currentKey = youtubeKey2;","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js",["136","137","138","139","140"],"import React, { useEffect, useState } from 'react';\nimport youtubeApi from '../api/youtube'\nimport videoDetailFinder from '../api/youtubeVideoContent'\nimport { parse, end, toSeconds, pattern } from 'iso8601-duration';\nimport { Gateway } from './Gateway';\n\nlet gateway = new Gateway();\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the { foundSong } prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID: id of the spotify song\n */\nlet lastChosenID = \"\";\nlet fromDatabase = false;\nexport default function TrackFinder({ name, artists, duration_ms, foundSong, trackID, trackImage, cantFind }) {\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params: {\n                q: search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", {\n            params: {\n                id: videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;                                                     // a list of videos                 \n            for (let video = 0; video < videoList.length; video++) {                            // for each video in the videoList...\n                const thisDetails = await videoDetail(videoList[video].id.videoId);             // Get details...\n                const thisDur = toMilli(thisDetails.data.items[0].contentDetails.duration);     // Get duration from details...\n                if (Math.abs(duration_ms - thisDur) <= 1000) {                                     // If the duration is what we're looking for...\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n            if (!chosenVideoID) {\n                let whitelistObj = {\n                    songID: trackID,\n                    songName: name,\n                    songArtists: artists,\n                    expectedDuration: duration_ms,\n                }\n\n                await gateway.addToWhitelist(whitelistObj);\n                cantFind(false);\n            }\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds(parse(ISO)) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(() => {        \n        async function findYoutubeID() {\n            const result = await gateway.checkReferenceDB(trackID);\n            lastChosenID = \"\";\n            if (result === \"\") {\n                const whitelistResult = await gateway.checkWhitelistDB(trackID);\n                if (whitelistResult === \"\") {\n                    fromDatabase = false;\n                    const search = createSearchQuery();\n                    await getYoutubeVideo(search);\n                } else {\n                    cantFind(true);\n                }\n            } else {\n                fromDatabase = true;\n                setChosenVideoID(result.videoID);\n            }\n        }\n\n        findYoutubeID();\n\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            let audioFormats = response.data;\n            foundSong(name, artists, duration_ms, audioFormats[0].url, trackID, trackImage, videoID, fromDatabase);\n            setChosenVideoID(\"\");\n        });\n    }\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js",["141"],"const cred1 = {\n    ClientId: '2f960da39c8b42d9a8dc394d02b97db0',\n    ClientSecret: '860fabcadd034f1d9368e7ca7791de73'\n}\n\n\nconst cred2 = {\n    ClientId: '75cbbf8c1ff14b9abe3cbfe6924fb5f0',\n    ClientSecret: 'da55e142b302460cab9b737153b93eb4'\n}\n\n\nfunction Credentials() {\n    return cred2;\n}\n\nexport { Credentials };","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/MixConfig.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/UpdateMixBot.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":102,"column":25,"nodeType":"148","endLine":102,"endColumn":36},{"ruleId":"146","severity":1,"message":"147","line":110,"column":24,"nodeType":"148","endLine":110,"endColumn":35},{"ruleId":"146","severity":1,"message":"149","line":50,"column":5,"nodeType":"148","endLine":50,"endColumn":14,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":67,"column":27,"nodeType":"153","messageId":"154","endLine":67,"endColumn":29},{"ruleId":"151","severity":1,"message":"152","line":67,"column":47,"nodeType":"153","messageId":"154","endLine":67,"endColumn":49},{"ruleId":"151","severity":1,"message":"152","line":69,"column":34,"nodeType":"153","messageId":"154","endLine":69,"endColumn":36},{"ruleId":"151","severity":1,"message":"152","line":69,"column":54,"nodeType":"153","messageId":"154","endLine":69,"endColumn":56},{"ruleId":"142","replacedBy":"155"},{"ruleId":"144","replacedBy":"156"},{"ruleId":"142","replacedBy":"157"},{"ruleId":"144","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":1,"column":16,"nodeType":"148","messageId":"161","endLine":1,"endColumn":24},{"ruleId":"159","severity":1,"message":"162","line":9,"column":12,"nodeType":"148","messageId":"161","endLine":9,"endColumn":19},{"ruleId":"146","severity":1,"message":"163","line":50,"column":8,"nodeType":"164","endLine":50,"endColumn":13,"suggestions":"165"},{"ruleId":"146","severity":1,"message":"166","line":66,"column":8,"nodeType":"164","endLine":66,"endColumn":19,"suggestions":"167"},{"ruleId":"142","replacedBy":"168"},{"ruleId":"144","replacedBy":"169"},{"ruleId":"151","severity":1,"message":"170","line":168,"column":93,"nodeType":"153","messageId":"154","endLine":168,"endColumn":95},{"ruleId":"171","severity":1,"message":"172","line":359,"column":13,"nodeType":"173","endLine":359,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":360,"column":13,"nodeType":"173","endLine":360,"endColumn":45},{"ruleId":"171","severity":1,"message":"172","line":363,"column":13,"nodeType":"173","endLine":363,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":364,"column":13,"nodeType":"173","endLine":364,"endColumn":46},{"ruleId":"171","severity":1,"message":"172","line":366,"column":13,"nodeType":"173","endLine":366,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":367,"column":13,"nodeType":"173","endLine":367,"endColumn":45},{"ruleId":"171","severity":1,"message":"172","line":368,"column":13,"nodeType":"173","endLine":368,"endColumn":37},{"ruleId":"171","severity":1,"message":"172","line":369,"column":13,"nodeType":"173","endLine":369,"endColumn":46},{"ruleId":"171","severity":1,"message":"172","line":391,"column":9,"nodeType":"173","endLine":391,"endColumn":41},{"ruleId":"159","severity":1,"message":"174","line":1,"column":7,"nodeType":"148","messageId":"161","endLine":1,"endColumn":18},{"ruleId":"159","severity":1,"message":"175","line":5,"column":7,"nodeType":"148","messageId":"161","endLine":5,"endColumn":18},{"ruleId":"159","severity":1,"message":"176","line":7,"column":7,"nodeType":"148","messageId":"161","endLine":7,"endColumn":18},{"ruleId":"159","severity":1,"message":"177","line":1,"column":8,"nodeType":"148","messageId":"161","endLine":1,"endColumn":13},{"ruleId":"159","severity":1,"message":"178","line":4,"column":17,"nodeType":"148","messageId":"161","endLine":4,"endColumn":20},{"ruleId":"159","severity":1,"message":"179","line":4,"column":33,"nodeType":"148","messageId":"161","endLine":4,"endColumn":40},{"ruleId":"146","severity":1,"message":"180","line":110,"column":8,"nodeType":"164","endLine":110,"endColumn":23,"suggestions":"181"},{"ruleId":"146","severity":1,"message":"182","line":133,"column":8,"nodeType":"164","endLine":133,"endColumn":36,"suggestions":"183"},{"ruleId":"159","severity":1,"message":"184","line":1,"column":7,"nodeType":"148","messageId":"161","endLine":1,"endColumn":12},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["187"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["185"],["186"],["185"],["186"],"no-unused-vars","'useState' is defined but never used.","unusedVar","'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["188"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["189"],["185"],["186"],"Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'youtubeKey1' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","'youtubeKey4' is assigned a value but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'cantFind', 'createSearchQuery', 'getYoutubeVideo', and 'trackID'. Either include them or remove the dependency array. If 'cantFind' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["191"],"'cred1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Add dependencies array: [clock]",{"range":"202","text":"203"},"Update the dependencies array to be: [url, volume]",{"range":"204","text":"205"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"206","text":"207"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"208","text":"209"},"Update the dependencies array to be: [name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]",{"range":"210","text":"211"},[1925,1925],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]",[3908,3923],"[chosenVideoID, videoIDtoMP3]",[4650,4678],"[name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]"]