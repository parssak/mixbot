[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"5","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"6","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"9","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"10","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"11","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"12","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"13","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"15","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"16","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"17","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js":"18","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js":"19","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js":"20","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js":"21","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/MixConfig.js":"22","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/UpdateMixBot.js":"23"},{"size":500,"mtime":1609255907946,"results":"24","hashOfConfig":"25"},{"size":1592,"mtime":1610728066386,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1609255907947,"results":"27","hashOfConfig":"25"},{"size":7675,"mtime":1610920427967,"results":"28","hashOfConfig":"25"},{"size":9931,"mtime":1610754312994,"results":"29","hashOfConfig":"25"},{"size":570,"mtime":1609255907945,"results":"30","hashOfConfig":"25"},{"size":814,"mtime":1610305380930,"results":"31","hashOfConfig":"25"},{"size":550,"mtime":1609255907945,"results":"32","hashOfConfig":"25"},{"size":3782,"mtime":1609255907946,"results":"33","hashOfConfig":"25"},{"size":767,"mtime":1610248130668,"results":"34","hashOfConfig":"25"},{"size":535,"mtime":1610299742890,"results":"35","hashOfConfig":"25"},{"size":18748,"mtime":1610921863881,"results":"36","hashOfConfig":"25"},{"size":4780,"mtime":1609255907945,"results":"37","hashOfConfig":"25"},{"size":354,"mtime":1610592920479,"results":"38","hashOfConfig":"25"},{"size":792,"mtime":1610657601273,"results":"39","hashOfConfig":"25"},{"size":5356,"mtime":1610732047321,"results":"40","hashOfConfig":"25"},{"size":1153,"mtime":1610591571713,"results":"41","hashOfConfig":"25"},{"size":8257,"mtime":1610402901089,"results":"42","hashOfConfig":"25"},{"size":2831,"mtime":1610672242111,"results":"43","hashOfConfig":"25"},{"size":5102,"mtime":1610658737410,"results":"44","hashOfConfig":"25"},{"size":315,"mtime":1610491225550,"results":"45","hashOfConfig":"25"},{"size":678,"mtime":1610753297490,"results":"46","hashOfConfig":"25"},{"size":863,"mtime":1610678156022,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"11p3aqi",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["105","106"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",[],"/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["107","108"],"/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["109","110","111","112","113"],"import React, { useEffect, useState } from 'react';\nimport Deck from \"./Deck\";\nimport './css_files/Queue.scss';\nimport { loadTrack, nextSongInQueue } from \"./Mixbot\";\n\nlet deck1startTime = 0;\nlet deck2startTime = 0;\n\nlet lastTrackSet = 0;\nlet mainTrack = 0;\n\nlet deck1lastBar = 0;\nlet deck2lastBar = 0;\n\nlet deckOneGlow = 9;\nlet deckTwoGlow = 9;\n\nlet equalizedGainVal = -10;\n\nexport default function TrackPlayer({ newThought, masterPlay }) {\n    const [clock, setClock] = useState();\n\n    const [deck1Song, setDeck1Song] = useState('');\n    const [deck2Song, setDeck2Song] = useState('');\n\n    const [deck1BPM, setDeck1BPM] = useState(0);\n    const [deck2BPM, setDeck2BPM] = useState(0);\n\n    const [deck1playback, setDeck1playback] = useState(1);\n    const [deck2playback, setDeck2playback] = useState(1);\n\n    const [deck1prepared, setDeck1prepared] = useState(false);\n    const [deck2prepared, setDeck2prepared] = useState(false);\n\n    const [deck1remove, setDeck1remove] = useState(false);\n    const [deck2remove, setDeck2remove] = useState(false);\n\n    const [deck1Playing, setDeck1Playing] = useState(false);\n    const [deck2Playing, setDeck2Playing] = useState(false);\n\n    const [deck1offset, setDeck1offset] = useState(0);\n    const [deck2offset, setDeck2offset] = useState(0);\n\n    // const [deck1gain, setDeck1Gain] = useState(null); // actual volumes in db\n    // const [deck2gain, setDeck2Gain] = useState(null);\n\n    const [deck1vol, setdeck1vol] = useState(1); // relative vol 0 -1\n    const [deck2vol, setdeck2vol] = useState(1);\n\n    useEffect(() => {\n        if (!clock) {\n            let newClock = new AudioContext();\n            setClock(newClock);\n        } \n        \n        if (Math.random() > 0.5) {\n            deckOneGlow += 10;\n            if (deckOneGlow >= 360) deckOneGlow = 0;\n        } else {\n            deckTwoGlow += 10;\n            if (deckTwoGlow >= 360) deckTwoGlow = 0;\n        }\n    })\n\n    useEffect(() => {\n        if (nextSongInQueue() !== null) {\n            if ((deck1BPM == 0) && (deck1Song == '')) {\n                loadTrackA();\n            } else if ((deck2BPM == 0) && (deck2Song == '')) {\n                loadTrackB();\n            }\n        }\n    })\n\n    function loadTrackA() {\n        let newSong = loadTrack();\n        setDeck1prepared(false);\n        setDeck1Playing(false);\n        setDeck1remove(false);\n        if (newSong !== null) {\n            if (!newSong.songAnalysis.analysis) {\n                console.log(\"CASE A\", newSong);\n            } else {\n                console.log(\"CASE B\", newSong);\n            }\n            setDeck1BPM(Math.round(newSong.songAnalysis.analysis.tempo)) // terribly sus\n            let newvol = (newSong.songAnalysis.analysis.loudness / equalizedGainVal).toPrecision(5);\n            console.log(\"DECK A NEW VOLUME >>>>>>>>>>>>>>>>\", newvol);\n            setdeck1vol(newvol);\n            // setDeck1Gain(newSong.songAnalysis.analysis.loudness);\n            if (deck2Song === '') {\n                setDeck1playback(1);\n            } else {\n                if (deck2BPM !== 0) {\n                    let ratioPB = (deck2BPM / newSong.songAnalysis.analysis.tempo).toPrecision(5);\n                    // let ratioVOL = (deck2gain / newSong.songAnalysis.analysis.loudness)\n                    setDeck1playback(ratioPB);\n                } else {\n                    setDeck1playback(1);\n                }\n            }\n            let think = \"Put \" + newSong.songName + \" on Deck A\";\n            newThought(think);\n            setDeck1Song(newSong);\n        }\n    }\n\n    function loadTrackB() {\n        let newSong = loadTrack();\n        setDeck2prepared(false);\n        setDeck2Playing(false);\n        setDeck2remove(false);\n        if (newSong !== null) {\n            \n\n            // EITHER IS newSong.songAnalysis || newSOng.songAnalysis.analysis\n            if (!newSong.songAnalysis.analysis) {\n                console.log(\"CASE A\", newSong);\n            } else {\n                console.log(\"CASE B\", newSong);\n            }\n\n            setDeck2BPM(Math.round(newSong.songAnalysis.analysis.tempo)) // terribly sus\n            let newvol = (newSong.songAnalysis.analysis.loudness / equalizedGainVal).toPrecision(5);\n            // console.log(\"DECK B NEW VOLUME >>>>>>>>>>>>>>>>\", newvol);\n            setdeck2vol(newvol);\n\n            if (deck1Song === '') {\n                setDeck2playback(1);\n            } else {\n                if (deck1BPM !== 0) {\n                    let ratio = (deck1BPM / Math.round(newSong.songAnalysis.analysis.tempo)).toPrecision(5);\n                    setDeck2playback(ratio);\n                } else {\n                    setDeck2playback(1);\n                }\n            }\n            let think = \"Put \" + newSong.songName + \" on Deck B\";\n            newThought(think);\n            setDeck2Song(newSong)\n        } else {\n            console.log(\"[WARNING] new song was null\");\n        }\n    }\n\n    function deckOneReady() {\n        if (!deck1prepared) {\n            setDeck1prepared(true);\n            if (!deck2Playing) {\n                setDeck1Playing(true);\n            }\n        }\n    }\n\n    function deckTwoReady() {\n        if (!deck2prepared) {\n            setDeck2prepared(true);\n            if (!deck1Playing) {\n                setDeck2Playing(true);\n            }\n        }\n    }\n\n    function playTrackTwo() {\n        if (deck2prepared) {\n            setDeck2Playing(true);\n            setDeck2prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 2;\n                mainTrack = 1;\n            }\n        }\n    }\n\n    function playTrackOne() {\n        if (deck1prepared) {\n            setDeck1Playing(true);\n            setDeck1prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 1;\n                mainTrack = 1;\n            }\n\n        }\n    }\n\n    function hitBarD1() {\n        deck1lastBar = clock.currentTime;\n        if (deck2Playing) {\n            setDeck1offset(deck2lastBar - deck1lastBar);\n        }\n    }\n\n    function hitBarD2() {\n        deck2lastBar = clock.currentTime;\n        if (deck1Playing) {\n            setDeck2offset(deck1lastBar - deck2lastBar);\n        }\n    }\n\n    function changeTrackA() {\n        mainTrack = 2;\n        setDeck2playback(1);\n        loadTrackA();\n    }\n\n    function changeTrackB() {\n        mainTrack = 1;\n        setDeck1playback(1);\n        loadTrackB();\n    }\n\n    function takeOutA() {\n        if (deck1Playing) setDeck1remove(true);\n        \n    }\n\n    function takeOutB() {\n        if (deck2Playing) setDeck2remove(true);\n    }\n\n    return (\n        <>\n            <div className={\"djboard\"}>\n                <div className={\"boardpanel\"} style={deck1Playing ? { boxShadow: `0 3px 100px hsla(${deckOneGlow}, 100%, 64%, 0.302)` } : { boxShadow: `0 0 0 hsla(${deckOneGlow}, 100%, 64%, 0.302)` }}>\n                    <h3>DECK A</h3>\n                    {deck1Song !== '' && <Deck\n                        \n                        thisSong={deck1Song.songURL}\n                        songName={deck1Song.songName}\n                        songArtist={deck1Song.songArtists[0].name}\n                        songImage={deck1Song.trackImage}\n                        songAnalysis={deck1Song.songAnalysis}\n                        \n                        playbackRate={deck1playback}\n                        prepared={deckOneReady}\n                        play={deck1Playing}\n                        startTime={deck1startTime}\n                        playOtherTrack={playTrackTwo}\n                        hitBar={hitBarD1}\n                        \n                        offset={deck1offset}\n                        deckName={\"Deck A\"}\n                        finished={changeTrackA}\n                        recommendedVolume={deck1vol}\n                        shouldSync={mainTrack !== 1}\n                        otherReady={deckTwoReady}\n                        waveformID={\"waveformA\"}\n                        bpm={deck1BPM}\n                        newThought={newThought}\n                        shouldRemove={deck1remove}\n                        removeOther={takeOutB}\n                        otherPlaying={deck2Playing}\n\n                        masterPlay={masterPlay}\n                    />\n                    }\n\n                </div>\n                <div className={\"boardpanel\"} style={deck2Playing ? { boxShadow: `0 3px 100px hsla(${deckTwoGlow}, 100%, 64%, 0.302)` } : { boxShadow: `0 0 0 hsla(${deckTwoGlow}, 100%, 64%, 0.302)` }}>\n                    <h3 style={{ textAlign: 'right' }}>DECK B</h3>\n                    {deck2Song !== '' && <Deck\n                        thisSong={deck2Song.songURL}\n                        songName={deck2Song.songName}\n                        songArtist={deck2Song.songArtists[0].name}\n                        songImage={deck2Song.trackImage}\n                        songAnalysis={deck2Song.songAnalysis}\n                        \n                        playbackRate={deck2playback}\n                        prepared={deckTwoReady}\n                        play={deck2Playing}\n                        startTime={deck2startTime}\n                        playOtherTrack={playTrackOne}\n                        hitBar={hitBarD2}\n                        offset={deck2offset}\n                        deckName={\"Deck B\"}\n                        finished={changeTrackB}\n                        recommendedVolume={deck2vol}\n                        shouldSync={mainTrack !== 2}\n                        otherReady={deckOneReady}\n                        waveformID={\"waveformB\"}\n                        bpm={deck2BPM}\n                        newThought={newThought}\n                        shouldRemove={deck2remove}\n                        removeOther={takeOutA}\n                        otherPlaying={deck1Playing}\n\n                        masterPlay={masterPlay}\n                    />}\n                </div>\n            </div>\n        </>\n    );\n}","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],["114","115"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],["116","117"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["118"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["119","120","121"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["122","123"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["124","125","126","127","128","129","130","131","132","133"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],["134","135"],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["136","137","138"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nconst youtubeKey4 = \"AIzaSyDgc98evXaE_C01NhK6ls2n7ZDkR - vg6sU\"; // backupPlan\n\n\nexport const currentKey = youtubeKey2;","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js",["139","140","141","142","143"],"import React, { useEffect, useState } from 'react';\nimport youtubeApi from '../api/youtube'\nimport videoDetailFinder from '../api/youtubeVideoContent'\nimport { parse, end, toSeconds, pattern } from 'iso8601-duration';\nimport { Gateway } from './Gateway';\n\nlet gateway = new Gateway();\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the { foundSong } prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID: id of the spotify song\n */\nlet lastChosenID = \"\";\nlet fromDatabase = false;\nexport default function TrackFinder({ name, artists, duration_ms, foundSong, trackID, trackImage, cantFind }) {\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params: {\n                q: search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", {\n            params: {\n                id: videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;                                                     // a list of videos                 \n            for (let video = 0; video < videoList.length; video++) {                            // for each video in the videoList...\n                const thisDetails = await videoDetail(videoList[video].id.videoId);             // Get details...\n                const thisDur = toMilli(thisDetails.data.items[0].contentDetails.duration);     // Get duration from details...\n                if (Math.abs(duration_ms - thisDur) <= 1000) {                                     // If the duration is what we're looking for...\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n            if (!chosenVideoID) {\n                let whitelistObj = {\n                    songID: trackID,\n                    songName: name,\n                    songArtists: artists,\n                    expectedDuration: duration_ms,\n                }\n\n                await gateway.addToWhitelist(whitelistObj);\n                cantFind(false);\n            }\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds(parse(ISO)) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(() => {        \n        async function findYoutubeID() {\n            const result = await gateway.checkReferenceDB(trackID);\n            lastChosenID = \"\";\n            if (result === \"\") {\n                const whitelistResult = await gateway.checkWhitelistDB(trackID);\n                if (whitelistResult === \"\") {\n                    fromDatabase = false;\n                    const search = createSearchQuery();\n                    await getYoutubeVideo(search);\n                } else {\n                    cantFind(true);\n                }\n            } else {\n                fromDatabase = true;\n                setChosenVideoID(result.videoID);\n            }\n        }\n\n        findYoutubeID();\n\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            let audioFormats = response.data;\n            foundSong(name, artists, duration_ms, audioFormats[0].url, trackID, trackImage, videoID, fromDatabase);\n            setChosenVideoID(\"\");\n        });\n    }\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js",["144"],"const cred1 = {\n    ClientId: '2f960da39c8b42d9a8dc394d02b97db0',\n    ClientSecret: '860fabcadd034f1d9368e7ca7791de73'\n}\n\n\nconst cred2 = {\n    ClientId: '75cbbf8c1ff14b9abe3cbfe6924fb5f0',\n    ClientSecret: 'da55e142b302460cab9b737153b93eb4'\n}\n\n\nfunction Credentials() {\n    return cred2;\n}\n\nexport { Credentials };","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/MixConfig.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/UpdateMixBot.js",[],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":103,"column":25,"nodeType":"151","endLine":103,"endColumn":36},{"ruleId":"149","severity":1,"message":"150","line":111,"column":24,"nodeType":"151","endLine":111,"endColumn":35},{"ruleId":"149","severity":1,"message":"152","line":50,"column":5,"nodeType":"151","endLine":50,"endColumn":14,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":67,"column":27,"nodeType":"156","messageId":"157","endLine":67,"endColumn":29},{"ruleId":"154","severity":1,"message":"155","line":67,"column":47,"nodeType":"156","messageId":"157","endLine":67,"endColumn":49},{"ruleId":"154","severity":1,"message":"155","line":69,"column":34,"nodeType":"156","messageId":"157","endLine":69,"endColumn":36},{"ruleId":"154","severity":1,"message":"155","line":69,"column":54,"nodeType":"156","messageId":"157","endLine":69,"endColumn":56},{"ruleId":"145","replacedBy":"158"},{"ruleId":"147","replacedBy":"159"},{"ruleId":"145","replacedBy":"160"},{"ruleId":"147","replacedBy":"161"},{"ruleId":"162","severity":1,"message":"163","line":1,"column":16,"nodeType":"151","messageId":"164","endLine":1,"endColumn":24},{"ruleId":"162","severity":1,"message":"165","line":9,"column":12,"nodeType":"151","messageId":"164","endLine":9,"endColumn":19},{"ruleId":"149","severity":1,"message":"166","line":50,"column":8,"nodeType":"167","endLine":50,"endColumn":13,"suggestions":"168"},{"ruleId":"149","severity":1,"message":"169","line":66,"column":8,"nodeType":"167","endLine":66,"endColumn":19,"suggestions":"170"},{"ruleId":"145","replacedBy":"171"},{"ruleId":"147","replacedBy":"172"},{"ruleId":"154","severity":1,"message":"173","line":168,"column":93,"nodeType":"156","messageId":"157","endLine":168,"endColumn":95},{"ruleId":"174","severity":1,"message":"175","line":367,"column":13,"nodeType":"176","endLine":367,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":368,"column":13,"nodeType":"176","endLine":368,"endColumn":45},{"ruleId":"174","severity":1,"message":"175","line":371,"column":13,"nodeType":"176","endLine":371,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":372,"column":13,"nodeType":"176","endLine":372,"endColumn":46},{"ruleId":"174","severity":1,"message":"175","line":374,"column":13,"nodeType":"176","endLine":374,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":375,"column":13,"nodeType":"176","endLine":375,"endColumn":45},{"ruleId":"174","severity":1,"message":"175","line":376,"column":13,"nodeType":"176","endLine":376,"endColumn":37},{"ruleId":"174","severity":1,"message":"175","line":377,"column":13,"nodeType":"176","endLine":377,"endColumn":46},{"ruleId":"174","severity":1,"message":"175","line":398,"column":9,"nodeType":"176","endLine":398,"endColumn":41},{"ruleId":"145","replacedBy":"177"},{"ruleId":"147","replacedBy":"178"},{"ruleId":"162","severity":1,"message":"179","line":1,"column":7,"nodeType":"151","messageId":"164","endLine":1,"endColumn":18},{"ruleId":"162","severity":1,"message":"180","line":5,"column":7,"nodeType":"151","messageId":"164","endLine":5,"endColumn":18},{"ruleId":"162","severity":1,"message":"181","line":7,"column":7,"nodeType":"151","messageId":"164","endLine":7,"endColumn":18},{"ruleId":"162","severity":1,"message":"182","line":1,"column":8,"nodeType":"151","messageId":"164","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"183","line":4,"column":17,"nodeType":"151","messageId":"164","endLine":4,"endColumn":20},{"ruleId":"162","severity":1,"message":"184","line":4,"column":33,"nodeType":"151","messageId":"164","endLine":4,"endColumn":40},{"ruleId":"149","severity":1,"message":"185","line":110,"column":8,"nodeType":"167","endLine":110,"endColumn":23,"suggestions":"186"},{"ruleId":"149","severity":1,"message":"187","line":133,"column":8,"nodeType":"167","endLine":133,"endColumn":36,"suggestions":"188"},{"ruleId":"162","severity":1,"message":"189","line":1,"column":7,"nodeType":"151","messageId":"164","endLine":1,"endColumn":12},"no-native-reassign",["190"],"no-negated-in-lhs",["191"],"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["192"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["190"],["191"],["190"],["191"],"no-unused-vars","'useState' is defined but never used.","unusedVar","'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["193"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["194"],["190"],["191"],"Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression",["190"],["191"],"'youtubeKey1' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","'youtubeKey4' is assigned a value but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'cantFind', 'createSearchQuery', 'getYoutubeVideo', and 'trackID'. Either include them or remove the dependency array. If 'cantFind' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["196"],"'cred1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},"Add dependencies array: [clock]",{"range":"207","text":"208"},"Update the dependencies array to be: [url, volume]",{"range":"209","text":"210"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"211","text":"212"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"213","text":"214"},"Update the dependencies array to be: [name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]",{"range":"215","text":"216"},[1925,1925],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]",[3908,3923],"[chosenVideoID, videoIDtoMP3]",[4650,4678],"[name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]"]