[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js":"5","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js":"6","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"9","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"10","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"11","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"12","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"13","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"15","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"16"},{"size":500,"mtime":1609255907946,"results":"17","hashOfConfig":"18"},{"size":492,"mtime":1610168291738,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1609255907947,"results":"20","hashOfConfig":"18"},{"size":6127,"mtime":1610150765998,"results":"21","hashOfConfig":"18"},{"size":4553,"mtime":1610148996823,"results":"22","hashOfConfig":"18"},{"size":182,"mtime":1609255907943,"results":"23","hashOfConfig":"18"},{"size":9976,"mtime":1610213089984,"results":"24","hashOfConfig":"18"},{"size":570,"mtime":1609255907945,"results":"25","hashOfConfig":"18"},{"size":784,"mtime":1610146514577,"results":"26","hashOfConfig":"18"},{"size":550,"mtime":1609255907945,"results":"27","hashOfConfig":"18"},{"size":3782,"mtime":1609255907946,"results":"28","hashOfConfig":"18"},{"size":726,"mtime":1610209930339,"results":"29","hashOfConfig":"18"},{"size":494,"mtime":1610209919507,"results":"30","hashOfConfig":"18"},{"size":25655,"mtime":1610213137746,"results":"31","hashOfConfig":"18"},{"size":4780,"mtime":1609255907945,"results":"32","hashOfConfig":"18"},{"size":273,"mtime":1610209900514,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"11p3aqi",{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["74","75"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",["76","77"],"import React, {useState, useEffect} from 'react';\nimport './css_files/App.css';\nimport TrackSelector from \"./TrackSelector\";\n\nfunction App() {\n    return(\n        <div className={\"body\"}>\n            <div className={\"title\"}>\n                <h1>MIXBOT</h1>\n                 <div className={\"credits\"}>\n                    <h3>An Open Source project by Parssa Kyanzadeh</h3> \n                 </div>\n            </div>\n            <TrackSelector/>\n        </div>\n    );\n}\nexport default App;\n","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["78","79","80","81"],"import React, { useState, useEffect } from 'react';\nimport Dropdown from \"./frontend_components/Dropdown\";\nimport { Credentials } from './Credentials';\nimport axios from 'axios';\nimport Listbox from \"./frontend_components/Listbox\";\nimport Detail from \"./frontend_components/Detail\";\nimport TrackFinder from \"./TrackFinder\";\nimport TrackPlayer, { trackAlreadyIn, addToQueue } from \"./TrackPlayer\";\n\nconst euroHouseID = \"2818tC1Ba59cftJJqjWKZi\";\n\nfunction TrackSelector() {\n    const spotify = Credentials();\n    const [token, setToken] = useState('');\n    const [genres, setGenres] = useState({ selectedGenre: '', listOfGenresFromAPI: [] });\n    const [playlist, setPlaylist] = useState({ selectedPlaylist: '2818tC1Ba59cftJJqjWKZi', listOfPlaylistFromAPI: [] });\n    const [tracks, setTracks] = useState({ selectedTrack: '', listOfTracksFromAPI: [] });\n    const [trackDetail, setTrackDetail] = useState(null);\n\n    useEffect(() => {\n        axios('https://accounts.spotify.com/api/token', {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Authorization': 'Basic ' + btoa(spotify.ClientId + ':' + spotify.ClientSecret)\n            },\n            data: 'grant_type=client_credentials',\n            method: 'POST'\n        })\n            .then(tokenResponse => {\n                setToken(tokenResponse.data.access_token);\n                // axios('https://api.spotify.com/v1/browse/categories', {\n                //     method: 'GET',\n                //     headers: { 'Authorization' : 'Bearer ' + tokenResponse.data.access_token}\n                // })\n                //     .then (genreResponse => {\n                //         console.log(genreResponse)\n                //         setGenres({\n                //             selectedGenre: genres.selectedGenre,\n                //             listOfGenresFromAPI: genreResponse.data.categories.items\n                //         })\n                //     });\n\n            });\n\n    }, [genres.selectedGenre, spotify.ClientId, spotify.ClientSecret]);\n\n    function genreChanged(val) {\n        setGenres({\n            selectedGenre: val,\n            listOfGenresFromAPI: genres.listOfGenresFromAPI\n        });\n\n        axios(`https://api.spotify.com/v1/browse/categories/${val}/playlists?limit=30`, {\n            method: 'GET',\n            headers: { 'Authorization': 'Bearer ' + token }\n        }).then(playlistResponse => {\n            setPlaylist({\n                selectedPlaylist: playlist.selectedPlaylist,\n                listOfPlaylistFromAPI: playlistResponse.data.playlists.items\n            })\n        });\n    }\n\n    function playlistChanged(val) {\n        setPlaylist({\n            selectedPlaylist: val,\n            listOfPlaylistFromAPI: playlist.listOfPlaylistFromAPI\n        });\n    }\n\n    function playlistSearchClicked(e) {\n        e.preventDefault();\n        console.log(\"selected playlist was\" + playlist.selectedPlaylist);\n        axios(`https://api.spotify.com/v1/playlists/${playlist.selectedPlaylist}/tracks?limit=40`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(tracksResponse => {\n            setTracks({\n                selectedTrack: tracks.selectedTrack,\n                listOfTracksFromAPI: tracksResponse.data.items\n            })\n        });\n    }\n\n    function selectTrack(val) {\n        const currentTracks = [...tracks.listOfTracksFromAPI];\n        const trackInfo = currentTracks.filter(t => t.track.id === val);\n        if (!trackAlreadyIn(trackInfo[0].track.name)) {\n            console.log(\">>>\",trackInfo[0].track);\n            setTrackDetail(trackInfo[0].track);\n        } else {\n            console.log(\"track is already in the queue\");\n        }\n    }\n\n    async function addSongToTracklist(songName, songArtists, duration, songURL, trackID, trackImage) {\n        if (!trackAlreadyIn(songName)) {\n            console.log(\"adding: \" + songName + \"with id \" + trackID);\n            getAudioAnalysis(trackID, songName, songArtists, duration, songURL, trackImage);\n        } else {\n            console.log(\"track is already in the queue\");\n            setTrackDetail(null);\n        }\n    }\n\n    const getAudioAnalysis = (id, songName, songArtists, duration, songURL, trackImage) => {\n        console.log(\"song id is \" + id);\n        axios(`https://api.spotify.com/v1/audio-analysis/${id}`, {\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            }\n        }).then(e => {\n            console.log(e);\n            addToQueue(songName, songArtists, duration, songURL, e, trackImage);\n        }).catch(e => {\n            addToQueue(songName, songArtists, duration, songURL, \"NOTFOUND\", trackImage);\n            console.log(e);\n        }).finally(() => {\n            setTrackDetail(null);\n        });\n    }\n\n    return (\n        <div>\n            {/* <hr/> */}\n            <TrackPlayer />\n            {/* <hr /> */}\n            <form onSubmit={playlistSearchClicked}>\n                {/* <Dropdown label=\"Genre: \" options={genres.listOfGenresFromAPI} selectedValue={genres.selectedGenre} changed={genreChanged} /> */}\n                {/* <Dropdown label=\"Playlist: \" options={playlist.listOfPlaylistFromAPI} selectedValue={playlist.selectedPlaylist} changed={playlistChanged} /> */}\n                {playlist.selectedPlaylist !== \"\" ? <button type='submit' className=\"begin-mix\">BEGIN MIX</button> : null}\n                <div>\n                    <Listbox items={tracks.listOfTracksFromAPI} clicked={selectTrack} />\n                    {trackDetail && <Detail {...trackDetail} />}\n                    {trackDetail && <TrackFinder name={trackDetail.name}\n                        artists={trackDetail.artists}\n                        duration_ms={trackDetail.duration_ms}\n                        trackID={trackDetail.id}\n                        trackImage={trackDetail.album.images[1]}\n                        foundSong={addSongToTracklist} />}\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default TrackSelector;\n","/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js",["82","83","84","85","86","87"],"import React, {useEffect, useState} from 'react';\nimport youtubeApi from './api/youtube'\nimport videoDetailFinder from './api/youtubeVideoContent'\nimport {parse, end, toSeconds, pattern} from 'iso8601-duration';\nimport ytdl from \"react-native-ytdl\";\n\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the foundSong prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID:\n */\nlet lastChosenID = \"\";\nexport default function TrackFinder({name, artists, duration_ms, foundSong, trackID, trackImage}) {\n\n    const [songName, setSongName] = useState(name);\n    const [songArtists, setSongArtists] = useState(artists);\n    const [duration, setDuration] = useState(duration_ms);\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        console.log(\" -- Entered createSearchQuery -- \")\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        console.log(\"SEARCH QUERY:\",searchQuery);\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        console.log(\"--- Entered videosSearch ---\")\n        const response = await youtubeApi.get(\"/search\", {\n            params:{\n                q:search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/videos\", {\n            params:{\n                id:videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;\n            console.log(\"-- Entered getYoutubeVideo --\");\n            for (let video = 0; video < videoList.length; video++) {\n                const thisID = await videoDetail(videoList[video].id.videoId);\n                const thisDur = toMilli(thisID.data.items[0].contentDetails.duration);\n                if (Math.abs(duration - thisDur) <= 1000) {\n                    console.log(videoList[video]);\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n\n        }).finally(async () => {\n            if (chosenVideoID === \"\") {\n                // console.log(\"could not find song\");\n            } else {\n                // console.log(\"found song\")\n            }\n\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds( parse(ISO) ) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n        console.log(\"| got youtube video ID, effect triggered | \")\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(async () => {\n        console.log(\"----- entered fx\");\n        setSongArtists(artists);\n        setSongName(name);\n        setDuration(duration_ms);\n        lastChosenID = \"\";\n        const search = createSearchQuery();\n        await getYoutubeVideo(search);\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        console.log(\"-- Entered videoIDtoMP3 --\")\n        await ytdl.getInfo(videoID, { quality: 'highestaudio'}).then(info => {\n            let audioFormats = ytdl.filterFormats(info.formats, 'audioonly');\n            foundSong(songName, songArtists, duration, audioFormats[0].url, trackID, trackImage);\n            setChosenVideoID(\"\");\n        });\n    }\n\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["88","89","90","91","92","93","94"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["95"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["96","97","98"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["99","100"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["119","120"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nexport const currentKey = youtubeKey1;",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":16,"nodeType":"127","messageId":"128","endLine":1,"endColumn":24},{"ruleId":"125","severity":1,"message":"129","line":1,"column":26,"nodeType":"127","messageId":"128","endLine":1,"endColumn":35},{"ruleId":"125","severity":1,"message":"130","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":16},{"ruleId":"125","severity":1,"message":"131","line":10,"column":7,"nodeType":"127","messageId":"128","endLine":10,"endColumn":18},{"ruleId":"125","severity":1,"message":"132","line":47,"column":14,"nodeType":"127","messageId":"128","endLine":47,"endColumn":26},{"ruleId":"125","severity":1,"message":"133","line":64,"column":14,"nodeType":"127","messageId":"128","endLine":64,"endColumn":29},{"ruleId":"125","severity":1,"message":"134","line":1,"column":8,"nodeType":"127","messageId":"128","endLine":1,"endColumn":13},{"ruleId":"125","severity":1,"message":"135","line":4,"column":16,"nodeType":"127","messageId":"128","endLine":4,"endColumn":19},{"ruleId":"125","severity":1,"message":"136","line":4,"column":32,"nodeType":"127","messageId":"128","endLine":4,"endColumn":39},{"ruleId":"137","severity":1,"message":"138","line":114,"column":8,"nodeType":"139","endLine":114,"endColumn":23,"suggestions":"140"},{"ruleId":"137","severity":1,"message":"141","line":116,"column":15,"nodeType":"142","endLine":124,"endColumn":6},{"ruleId":"137","severity":1,"message":"143","line":124,"column":8,"nodeType":"139","endLine":124,"endColumn":36,"suggestions":"144"},{"ruleId":"125","severity":1,"message":"145","line":31,"column":5,"nodeType":"127","messageId":"128","endLine":31,"endColumn":18},{"ruleId":"137","severity":1,"message":"146","line":64,"column":5,"nodeType":"127","endLine":64,"endColumn":14,"suggestions":"147"},{"ruleId":"125","severity":1,"message":"148","line":163,"column":21,"nodeType":"127","messageId":"128","endLine":163,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":225,"column":27,"nodeType":"151","messageId":"152","endLine":225,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":225,"column":47,"nodeType":"151","messageId":"152","endLine":225,"endColumn":49},{"ruleId":"149","severity":1,"message":"150","line":229,"column":27,"nodeType":"151","messageId":"152","endLine":229,"endColumn":29},{"ruleId":"149","severity":1,"message":"150","line":229,"column":47,"nodeType":"151","messageId":"152","endLine":229,"endColumn":49},{"ruleId":"125","severity":1,"message":"126","line":1,"column":16,"nodeType":"127","messageId":"128","endLine":1,"endColumn":24},{"ruleId":"125","severity":1,"message":"153","line":9,"column":12,"nodeType":"127","messageId":"128","endLine":9,"endColumn":19},{"ruleId":"137","severity":1,"message":"154","line":50,"column":8,"nodeType":"139","endLine":50,"endColumn":13,"suggestions":"155"},{"ruleId":"137","severity":1,"message":"156","line":66,"column":8,"nodeType":"139","endLine":66,"endColumn":19,"suggestions":"157"},{"ruleId":"121","replacedBy":"158"},{"ruleId":"123","replacedBy":"159"},{"ruleId":"125","severity":1,"message":"160","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":12},{"ruleId":"161","severity":1,"message":"162","line":117,"column":13,"nodeType":"163","endLine":117,"endColumn":23},{"ruleId":"149","severity":1,"message":"164","line":161,"column":93,"nodeType":"151","messageId":"152","endLine":161,"endColumn":95},{"ruleId":"125","severity":1,"message":"165","line":240,"column":13,"nodeType":"127","messageId":"128","endLine":240,"endColumn":24},{"ruleId":"149","severity":1,"message":"150","line":357,"column":49,"nodeType":"151","messageId":"152","endLine":357,"endColumn":51},{"ruleId":"149","severity":1,"message":"150","line":357,"column":90,"nodeType":"151","messageId":"152","endLine":357,"endColumn":92},{"ruleId":"149","severity":1,"message":"150","line":357,"column":129,"nodeType":"151","messageId":"152","endLine":357,"endColumn":131},{"ruleId":"149","severity":1,"message":"150","line":362,"column":55,"nodeType":"151","messageId":"152","endLine":362,"endColumn":57},{"ruleId":"161","severity":1,"message":"162","line":377,"column":9,"nodeType":"163","endLine":377,"endColumn":32},{"ruleId":"161","severity":1,"message":"162","line":577,"column":13,"nodeType":"163","endLine":577,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":578,"column":13,"nodeType":"163","endLine":578,"endColumn":45},{"ruleId":"161","severity":1,"message":"162","line":581,"column":13,"nodeType":"163","endLine":581,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":582,"column":13,"nodeType":"163","endLine":582,"endColumn":46},{"ruleId":"161","severity":1,"message":"162","line":584,"column":13,"nodeType":"163","endLine":584,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":585,"column":13,"nodeType":"163","endLine":585,"endColumn":45},{"ruleId":"161","severity":1,"message":"162","line":586,"column":13,"nodeType":"163","endLine":586,"endColumn":37},{"ruleId":"161","severity":1,"message":"162","line":587,"column":13,"nodeType":"163","endLine":587,"endColumn":46},{"ruleId":"161","severity":1,"message":"162","line":611,"column":9,"nodeType":"163","endLine":611,"endColumn":41},{"ruleId":"125","severity":1,"message":"166","line":3,"column":7,"nodeType":"127","messageId":"128","endLine":3,"endColumn":18},{"ruleId":"125","severity":1,"message":"167","line":5,"column":7,"nodeType":"127","messageId":"128","endLine":5,"endColumn":18},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Dropdown' is defined but never used.","'euroHouseID' is assigned a value but never used.","'genreChanged' is defined but never used.","'playlistChanged' is defined but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.","ArrayExpression",["170"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createSearchQuery' and 'getYoutubeVideo'. Either include them or remove the dependency array.",["171"],"'deck1playtime' is assigned a value but never used.","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["172"],"'playDeck2SongScheduled' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.",["173"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["174"],["168"],["169"],"'Knob' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","Expected '!==' and instead saw '!='.","'currSection' is assigned a value but never used.","'youtubeKey2' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"185","text":"186"},"Update the dependencies array to be: [name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",{"range":"187","text":"188"},"Add dependencies array: [clock]",{"range":"189","text":"190"},"Update the dependencies array to be: [url, volume]",{"range":"191","text":"192"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"193","text":"194"},[3800,3815],"[chosenVideoID, videoIDtoMP3]",[4098,4126],"[name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",[2109,2109],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]"]