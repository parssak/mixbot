[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"5","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"6","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"9","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"10","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"11","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"12","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"13","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"15","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"16","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"17","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js":"18","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js":"19","/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js":"20","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js":"21"},{"size":500,"mtime":1609255907946,"results":"22","hashOfConfig":"23"},{"size":471,"mtime":1610579347372,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1609255907947,"results":"25","hashOfConfig":"23"},{"size":7064,"mtime":1610581236371,"results":"26","hashOfConfig":"23"},{"size":8837,"mtime":1610576039888,"results":"27","hashOfConfig":"23"},{"size":570,"mtime":1609255907945,"results":"28","hashOfConfig":"23"},{"size":814,"mtime":1610305380930,"results":"29","hashOfConfig":"23"},{"size":550,"mtime":1609255907945,"results":"30","hashOfConfig":"23"},{"size":3782,"mtime":1609255907946,"results":"31","hashOfConfig":"23"},{"size":767,"mtime":1610248130668,"results":"32","hashOfConfig":"23"},{"size":535,"mtime":1610299742890,"results":"33","hashOfConfig":"23"},{"size":16328,"mtime":1610571570450,"results":"34","hashOfConfig":"23"},{"size":4780,"mtime":1609255907945,"results":"35","hashOfConfig":"23"},{"size":354,"mtime":1610328014835,"results":"36","hashOfConfig":"23"},{"size":608,"mtime":1610376480379,"results":"37","hashOfConfig":"23"},{"size":5634,"mtime":1610581453846,"results":"38","hashOfConfig":"23"},{"size":1120,"mtime":1610376717223,"results":"39","hashOfConfig":"23"},{"size":8257,"mtime":1610402901089,"results":"40","hashOfConfig":"23"},{"size":2534,"mtime":1610569649196,"results":"41","hashOfConfig":"23"},{"size":5093,"mtime":1610506622420,"results":"42","hashOfConfig":"23"},{"size":315,"mtime":1610491225550,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"11p3aqi",{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"57"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"46"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"46"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["95","96"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",["97","98"],"/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["99","100"],"/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["101","102","103","104","105"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],["106","107"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["108"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["109","110","111"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["112","113"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["114","115","116","117","118","119","120","121","122","123","124"],"import React, { Component } from 'react';\nimport Knob from './frontend_components/Knob';\nimport WaveSurfer from 'wavesurfer.js';\nimport RegionPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport './css_files/Deck.scss';\nimport { SectionType } from './helper_classes/Analyzer';\nimport { thoughtType } from './Mixbot';\n\nlet xhr = { cache: 'default', mode: 'cors', method: 'GET', credentials: 'same-origin', redirect: 'follow', referrer: 'client', headers: [{ 'Access-Control-Allow-Origin': '*' }] };\n\nexport default class Deck extends Component {\n    constructor(props) {\n        super(props);\n        console.log(\"entered constructor call!\");\n        this.state = {\n            pos: 0,\n            locked: false,\n            scheduledDemise: false,\n            currSec: \"NOT PLAYING\",\n            playing: false,\n            trackName: this.props.songName,\n            trackArtist: this.props.songArtist,\n            audioCtx: new AudioContext(),\n            audioSettings: {\n                gain: 1,\n                lowpassF: 11000,\n                highpassF: 0,\n                high: 1,\n                mid: 1,\n                low: 1,\n                playbackRate: this.props.playbackRate\n            },\n            currSectionAnalysis: {\n                begin: NaN,\n                endpoint: NaN,\n                comparisonLoudness: NaN,\n                differential: NaN,\n                sectionConfidence: NaN,\n                conformedBegin: NaN,\n                conformedEnd: NaN,\n                oBegin: NaN,\n                oEnd: NaN,\n                sectionColor: `rgb(255,255,255)`,\n                goodForMix: false,\n                isBest: false\n            },\n            startingPos: 0\n        };\n\n        this.waveSurferOptions = {\n            container: `#${this.props.waveformID}`,\n            waveColor: \"#ffffff\",\n            cursorColor: \"tomato\",\n            hideScrollbar: true,\n            normalize: true,\n            height: 70,\n            barWidth: 1,\n            barHeight: 0.5, // the height of the wave\n            barRadius: 2,\n            plugins: [\n                RegionPlugin.create(),\n            ],\n            xhr: xhr\n        }\n\n        this.lastAdjustTime = 0;\n        this.synced = false;\n        this.fadingOut = false;\n        this.fadingIn = false;\n        this.totalOffset = 0;\n        this.numSuccessful = 0;\n        this.numDropsPassed = 0;\n\n        this.playPause = this.playPause.bind(this);\n        this.fadeOutSong = this.fadeOutSong.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.changeGain = this.changeGain.bind(this);\n        this.reconnectAudio = this.reconnectAudio.bind(this);\n        this.handlePosChange = this.handlePosChange.bind(this);\n        this.takeOutSong = this.takeOutSong.bind(this);\n    }\n\n    componentDidMount() {\n        this.waveform = WaveSurfer.create(this.waveSurferOptions);\n\n        this.waveform.on('error', e => {\n            console.error(e);\n        })     \n        this.waveform.load(this.props.thisSong);\n        this.waveform.setPlaybackRate(this.props.playbackRate);\n        this.reconnectAudio();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.thisSong !== prevProps.thisSong) { // TODO LEFT OFF HERE, YOU WERE TRYING TO MAKE SWITCHING SONGS ON A SINGLE DECK WORK BC IT KEEPS PLAYING THE OLD ONE ALSO REGIONS AREN\"T DISAPPEARING\n            console.log(\"|| -- THE SONG CHANGED -- ||\", this.props.deckName);\n            this.waveform.pause();\n\n            this.synced = false;\n            this.numSuccessful = 0;\n            this.totalOffset = 0;\n            this.fadingOut = false;\n            this.fadingIn = false;\n            this.numDropsPassed = 0;\n\n            this.waveform.destroy();\n\n            this.waveform = WaveSurfer.create(this.waveSurferOptions);\n            \n            this.waveform.on('error', e => {\n                console.log(\"hit error:\", e);\n            })\n\n            let dummy = new Audio(this.props.thisSong);\n            this.waveform.load(dummy.src);\n            this.waveform.setPlaybackRate(this.props.playbackRate);\n\n            this.reconnectAudio();\n        } \n\n        if (this.state.audioCtx.state !== 'suspended') {\n            if (this.props.play !== this.waveform.isPlaying()) {\n                if (!this.props.play) {\n                    console.log(\"~~~ SHOULD BE PAUSED NGL ~~~\");\n                    this.waveform.pause();\n                } else {\n                    this.playPause();\n                }\n            }\n        }\n\n        if (!this.props.shouldSync) {\n            this.synced = true; // If this is the main track, don't sync it\n            this.waveform.setPlaybackRate(1);\n        }\n\n        // If the offset between tracks is under 0.1 seconds and this is playing, this track is succesful\n        // ! The margin of error of 0.1s is needed due to timing issues with WebAudio\n        if (Math.abs(this.props.offset) < 0.1 && this.waveform.isPlaying()) {\n            this.numSuccessful++;\n            if (Math.abs(this.props.offset) < 0.05) this.numSuccessful++;\n            if (this.numSuccessful >= 3) {\n                this.synced = true;\n            }\n        }\n\n        /**\n         * IF:\n         *  1) New offset passed in\n         *  2) It has been over 5 seconds since the last time it was adjusted\n         */\n        if (this.props.offset !== prevProps.offset &&\n            this.waveform.getCurrentTime() - this.lastAdjustTime > 5 &&\n            Math.abs(this.props.offset) >= 0.05 &&\n            !this.synced) {\n            this.numSuccessful = 0;\n            console.log(this.props.deckName, \"-> about to sync\");\n            if (this.waveform.getCurrentTime() + this.props.offset > 1 && this.props.offset != 0) {\n                this.lastAdjustTime = this.waveform.getCurrentTime();\n                let adjustedOffset = this.props.offset;\n                this.totalOffset = this.props.offset;\n                console.log(\"%%%   \", this.props.deckName, \"total offset:\", this.totalOffset);\n                let desiredTime = this.waveform.getCurrentTime() + this.props.offset;\n                console.log(\"%%%   \", this.props.deckName, \" song pos was at:\", this.waveform.getCurrentTime(), \"we need:\", desiredTime);\n                this.waveform.pause();\n                this.waveform.skip(adjustedOffset);\n                this.waveform.playPause();\n                console.log(\"%%%   \", this.props.deckName, \" now we are at:\", this.waveform.getCurrentTime(), \"difference is:\", desiredTime - this.waveform.getCurrentTime(), \"offset diff:\", (this.props.offset - desiredTime - this.waveform.getCurrentTime()));\n            } else {\n                console.log(this.props.deckName, \"-> didn't sync \");\n            }\n        }\n\n        if (this.props.shouldRemove && !this.fadingOut && !this.shouldSync && this.props.otherPlaying) {\n            this.takeOutSong();\n        }\n    }\n\n    reconnectAudio() {\n        console.log(\"reconnecting audio\");\n        // LOWPASS\n        let lowpass = this.waveform.backend.ac.createBiquadFilter();\n        lowpass.frequency.value = this.state.audioSettings.lowpassF || 11000;\n        lowpass.type = \"lowpass\";\n        lowpass.Q.value = 5;\n        this.setState({\n            lowpassNode: lowpass\n        });\n\n        // HIGHPASS\n        let highpass = this.waveform.backend.ac.createBiquadFilter();\n        highpass.frequency.value = this.state.audioSettings.highpassF || 0;\n        highpass.type = \"highpass\";\n        highpass.Q.value = 5;\n        this.setState({\n            highpassNode: highpass\n        });\n\n        // GAIN\n        let gain = this.waveform.backend.ac.createGain();\n        gain.value = this.state.audioSettings.gain || 0.01;\n        this.setState({\n            gainNode: gain\n        });\n        this.waveform.backend.setFilter(lowpass, highpass);\n        console.log(\"INNNNNNNNDAAAADEEECKKKKKKK\");\n        console.log(this.props.songAnalysis);\n        if (this.props.songAnalysis !== 'NOTFOUND') {\n            let analyzed = this.props.songAnalysis.analysis.songSections;\n            \n            analyzed.forEach(section => {\n                let region = {\n                    start: section.begin,\n                    end: section.endpoint,\n                    attributes: section.computed,\n                    data: section,\n                    color: section.sectionColor,\n                    drag: false,\n                    resize: false,\n                }\n                this.waveform.addRegion(region);\n            })\n\n            let bars = this.props.songAnalysis.analysis.bars;\n            bars.forEach(b => {\n                this.waveform.addRegion(b);\n            })\n            this.setState({\n                startingPos: this.props.songAnalysis.startPos\n            })\n        }\n        this.waveform.on('region-in', e => {\n            this.props.hitBar();\n            if (e.data.sectionType !== undefined) { // has data!\n                if (e.data.sectionType === SectionType.DROP) {\n                    this.numDropsPassed++;\n                }\n            }\n        })\n\n        this.waveform.on('region-out', e => {\n            let thisSection = e.data;\n            let computed = thisSection.computed;\n            if (computed) {\n                this.setState({\n                    currSec: thisSection.sectionType,\n                    currSectionAnalysis: {\n                        begin: thisSection.begin,\n                        endpoint: thisSection.endpoint,\n                        comparisonLoudness: computed.comparisonLoudness,\n                        differential: computed.differential,\n                        sectionConfidence: computed.sectionConfidence,\n                        conformedBegin: computed.comformedBegin,\n                        conformedEnd: computed.comformedEnd,\n                        oBegin: computed.oBegin,\n                        oEnd: computed.oEnd,\n                        sectionColor: thisSection.sectionColor,\n                        goodForMix: thisSection.goodForMix,\n                        isBest: thisSection.isBest,\n                        sizeComparison: thisSection.sizeComparison,\n                        is32: thisSection.is32\n                    }\n                })\n                console.log(this.props.deckName, \" HAS FINISHED\", this.waveform.getCurrentTime() / this.waveform.getDuration(), \"OF ITS SONG\");\n                if (this.props.otherReady && (this.waveform.getCurrentTime() / this.waveform.getDuration() > 0.5)) {\n                    if (thisSection.sectionType === SectionType.DROP && this.numDropsPassed > 0) {\n                        this.props.playOtherTrack();                                                    // TODO LEFT OFF HERE SONG B NOT PLAYING\n                    } else if (this.waveform.getCurrentTime() / this.waveform.getDuration() > 0.7) {\n                        this.props.playOtherTrack();\n                    }\n                }\n            } else {\n                this.props.hitBar();\n            }\n        });\n\n        this.waveform.on('ready', e => {\n            console.log(\"------ READY TO GO! 1 ------\");\n            this.state.audioCtx.resume();\n            if (!this.waveform.isPlaying()) {\n                this.playPause();\n                this.props.prepared();\n            }\n            this.waveform.setVolume(0.1);\n        });\n\n        this.waveform.on('play', e => {\n            this.waveform.setVolume(0.1);\n            if (this.props.play) {\n                console.log(this.props.deckName, \" JUST STARTED PLAYING GONNA FADE IT IN NOW OK\");\n                let think = \"Fading in \" + this.props.deckName;\n                this.props.newThought(think, thoughtType.MIX);\n                this.fadeInSong();\n            }\n            \n        })\n\n    }\n\n    takeOutSong() {\n        this.fadeOutSong();\n        let think = \"Fading out \" + this.props.deckName;\n        this.props.newThought(think, thoughtType.MIX);\n    }\n\n    playPause() {\n        // check if context is in suspended state (autoplay policy)\n        if (this.state.audioCtx.state === 'suspended') {\n            this.state.audioCtx.resume();\n\n        }\n        this.waveform.play(this.state.startingPos);\n        if (this.state.playing !== this.waveform.isPlaying()) {\n            this.setState({\n                playing: this.waveform.isPlaying()\n            });\n        }\n    }\n\n    changeFilter(amount) {\n        if (amount <= 14000) {\n            this.state.audioSettings.lowpassF = amount;\n            this.state.lowpassNode.frequency.value = amount;\n        } else if (amount >= 20000) {\n            let highpassAmount = amount - 20000;\n            this.state.audioSettings.highpassF = highpassAmount;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        } else {\n            this.state.audioSettings.lowpassF = 30000;\n            this.state.lowpassNode.frequency.value = this.state.audioSettings.lowpassF;\n            this.state.audioSettings.highpassF = 0;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        }\n    }\n\n    changeGain(amount) {\n        this.setState({\n            audioSettings: {\n                gain: (amount / 100).toPrecision(2)\n            }\n        })\n        this.waveform.setVolume((amount / 100).toPrecision(2) || 1);\n    }\n\n    handlePosChange(e) {\n        this.setState({\n            pos: e\n        });\n    }\n\n    fadeOutSong() {\n        // console.log(\"fading out\");\n        this.fadingOut = true;\n        this.waveform.setVolume(lerp(this.waveform.getVolume(), 0, Math.max(this.waveform.getVolume() / 3), 0.1, this.props.deckName));\n        this.state.lowpassNode.frequency.value -= (this.state.lowpassNode.frequency.value / 10);\n        if (this.waveform.getVolume() < 0.2) this.waveform.setVolume(this.waveform.getVolume() - 0.03);\n        if (this.waveform.getVolume() > 0.01) {\n            setTimeout(() => {\n                this.fadeOutSong();\n            }, 1000);\n        } else {\n            console.log(\">>>>>>>   >>> \", this.props.deckName, \" FADED OUT_________\");\n            this.fadingOut = false;\n            this.waveform.setVolume(0);\n            this.waveform.pause();\n            this.props.finished();\n        }\n    }\n\n    fadeInSong() {\n        this.fadingIn = true;\n        let newVol = lerp(this.waveform.getVolume(), this.props.recommendedVolume, Math.min((this.waveform.getVolume()) / 4), 0.03, this.props.deckName);\n        if (isFinite(newVol)) this.waveform.setVolume(newVol);\n        \n        if (this.waveform.getVolume() < this.props.recommendedVolume - 0.1) {   // TODO TWEAK THIS BASED ON IF MAIN TRACK OR NOT\n            setTimeout(() => {\n                this.fadeInSong();\n            }, 1000);\n        } else {\n            console.log(\">>>>>>>  !!!  >>> \", this.props.deckName, \" FADED IN_________!!!!\");\n            this.fadingIn = false;\n            this.waveform.setVolume(this.props.recommendedVolume);\n            this.props.removeOther();\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className={\"deck\"}>\n                    <img src={this.props.songImage.url} alt=\"\" />\n                    <div className={\"deck-content\"}>\n                        <div className={\"deck-text\"}>\n                            {this.props.songName !== \"\" && <h2>{this.props.songName}</h2>}\n                            {this.props.songName !== \"\" && <h3>{this.props.songArtist}</h3>}\n                        </div>\n                        <div className={\"deck-text\"}>\n                            <h4>{this.props.bpm} BPM</h4>\n                            {/* <h4>{this.props.bpm} BPM</h4> */}\n                        </div>\n                        <div id={`${this.props.waveformID}`} />\n                    </div>\n                    {/* <Knob size={70} numTicks={70} degrees={260} min={0} max={100} value={50} color={true} onChange={this.changeGain} /> */}\n                    {/* <Knob size={70} numTicks={70} degrees={260} min={1000} max={30000} value={15000} color={true} onChange={this.changeFilter} /> */}\n                </div>\n            </>\n        );\n    }\n}\n\nfunction lerp(start, end, amt, deckname) {\n    // console.log(deckname, \"lerped this:\", start, end, amt, \"to:\", (1 - amt) * start + amt * end);\n    return (1 - amt) * start + amt * end\n}\n\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["125","126","127"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nconst youtubeKey4 = \"AIzaSyDgc98evXaE_C01NhK6ls2n7ZDkR - vg6sU\"; // backupPlan\n\n\nexport const currentKey = youtubeKey4;","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",["128"],"/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Analyzer.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/Gateway.js",[],"/Users/parssa/Desktop/repos/mixbot/src/helper_classes/TrackFinder.js",["129","130","131","132","133"],"import React, { useEffect, useState } from 'react';\nimport youtubeApi from '../api/youtube'\nimport videoDetailFinder from '../api/youtubeVideoContent'\nimport { parse, end, toSeconds, pattern } from 'iso8601-duration';\nimport { Gateway } from './Gateway';\n\nlet gateway = new Gateway();\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the { foundSong } prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID: id of the spotify song\n */\nlet lastChosenID = \"\";\nlet fromDatabase = false;\nexport default function TrackFinder({ name, artists, duration_ms, foundSong, trackID, trackImage, cantFind }) {\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params: {\n                q: search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", {\n            params: {\n                id: videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;                                                     // a list of videos                 \n            for (let video = 0; video < videoList.length; video++) {                            // for each video in the videoList...\n                const thisDetails = await videoDetail(videoList[video].id.videoId);             // Get details...\n                const thisDur = toMilli(thisDetails.data.items[0].contentDetails.duration);     // Get duration from details...\n                if (Math.abs(duration_ms - thisDur) <= 1000) {                                     // If the duration is what we're looking for...\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n            if (!chosenVideoID) {\n                let whitelistObj = {\n                    songID: trackID,\n                    songName: name,\n                    songArtists: artists,\n                    expectedDuration: duration_ms,\n                }\n\n                await gateway.addToWhitelist(whitelistObj);\n                cantFind();\n            }\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds(parse(ISO)) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(() => {        \n        async function findYoutubeID() {\n            const result = await gateway.checkReferenceDB(trackID);\n            lastChosenID = \"\";\n            if (result === \"\") {\n                const whitelistResult = await gateway.checkWhitelistDB(trackID);\n                if (whitelistResult === \"\") {\n                    fromDatabase = false;\n                    const search = createSearchQuery();\n                    await getYoutubeVideo(search);\n                } else {\n                    cantFind();\n                }\n            } else {\n                fromDatabase = true;\n                setChosenVideoID(result.videoID);\n            }\n        }\n\n        findYoutubeID();\n\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            let audioFormats = response.data;\n            foundSong(name, artists, duration_ms, audioFormats[0].url, trackID, trackImage, videoID, fromDatabase);\n            setChosenVideoID(\"\");\n        });\n    }\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/api/Credentials.js",["134"],"const cred1 = {\n    ClientId: '2f960da39c8b42d9a8dc394d02b97db0',\n    ClientSecret: '860fabcadd034f1d9368e7ca7791de73'\n}\n\n\nconst cred2 = {\n    ClientId: '75cbbf8c1ff14b9abe3cbfe6924fb5f0',\n    ClientSecret: 'da55e142b302460cab9b737153b93eb4'\n}\n\n\nfunction Credentials() {\n    return cred2;\n}\n\nexport { Credentials };",{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":16,"nodeType":"141","messageId":"142","endLine":1,"endColumn":24},{"ruleId":"139","severity":1,"message":"143","line":1,"column":26,"nodeType":"141","messageId":"142","endLine":1,"endColumn":35},{"ruleId":"144","severity":1,"message":"145","line":76,"column":25,"nodeType":"141","endLine":76,"endColumn":36},{"ruleId":"144","severity":1,"message":"145","line":90,"column":24,"nodeType":"141","endLine":90,"endColumn":35},{"ruleId":"144","severity":1,"message":"146","line":44,"column":5,"nodeType":"141","endLine":44,"endColumn":14,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":61,"column":27,"nodeType":"150","messageId":"151","endLine":61,"endColumn":29},{"ruleId":"148","severity":1,"message":"149","line":61,"column":47,"nodeType":"150","messageId":"151","endLine":61,"endColumn":49},{"ruleId":"148","severity":1,"message":"149","line":63,"column":34,"nodeType":"150","messageId":"151","endLine":63,"endColumn":36},{"ruleId":"148","severity":1,"message":"149","line":63,"column":54,"nodeType":"150","messageId":"151","endLine":63,"endColumn":56},{"ruleId":"135","replacedBy":"152"},{"ruleId":"137","replacedBy":"153"},{"ruleId":"139","severity":1,"message":"140","line":1,"column":16,"nodeType":"141","messageId":"142","endLine":1,"endColumn":24},{"ruleId":"139","severity":1,"message":"154","line":9,"column":12,"nodeType":"141","messageId":"142","endLine":9,"endColumn":19},{"ruleId":"144","severity":1,"message":"155","line":50,"column":8,"nodeType":"156","endLine":50,"endColumn":13,"suggestions":"157"},{"ruleId":"144","severity":1,"message":"158","line":66,"column":8,"nodeType":"156","endLine":66,"endColumn":19,"suggestions":"159"},{"ruleId":"135","replacedBy":"160"},{"ruleId":"137","replacedBy":"161"},{"ruleId":"139","severity":1,"message":"162","line":2,"column":8,"nodeType":"141","messageId":"142","endLine":2,"endColumn":12},{"ruleId":"148","severity":1,"message":"163","line":158,"column":93,"nodeType":"150","messageId":"151","endLine":158,"endColumn":95},{"ruleId":"164","severity":1,"message":"165","line":322,"column":13,"nodeType":"166","endLine":322,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":323,"column":13,"nodeType":"166","endLine":323,"endColumn":45},{"ruleId":"164","severity":1,"message":"165","line":326,"column":13,"nodeType":"166","endLine":326,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":327,"column":13,"nodeType":"166","endLine":327,"endColumn":46},{"ruleId":"164","severity":1,"message":"165","line":329,"column":13,"nodeType":"166","endLine":329,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":330,"column":13,"nodeType":"166","endLine":330,"endColumn":45},{"ruleId":"164","severity":1,"message":"165","line":331,"column":13,"nodeType":"166","endLine":331,"endColumn":37},{"ruleId":"164","severity":1,"message":"165","line":332,"column":13,"nodeType":"166","endLine":332,"endColumn":46},{"ruleId":"164","severity":1,"message":"165","line":355,"column":9,"nodeType":"166","endLine":355,"endColumn":41},{"ruleId":"139","severity":1,"message":"167","line":1,"column":7,"nodeType":"141","messageId":"142","endLine":1,"endColumn":18},{"ruleId":"139","severity":1,"message":"168","line":3,"column":7,"nodeType":"141","messageId":"142","endLine":3,"endColumn":18},{"ruleId":"139","severity":1,"message":"169","line":5,"column":7,"nodeType":"141","messageId":"142","endLine":5,"endColumn":18},{"ruleId":"148","severity":1,"message":"149","line":160,"column":39,"nodeType":"150","messageId":"151","endLine":160,"endColumn":41},{"ruleId":"139","severity":1,"message":"170","line":1,"column":8,"nodeType":"141","messageId":"142","endLine":1,"endColumn":13},{"ruleId":"139","severity":1,"message":"171","line":4,"column":17,"nodeType":"141","messageId":"142","endLine":4,"endColumn":20},{"ruleId":"139","severity":1,"message":"172","line":4,"column":33,"nodeType":"141","messageId":"142","endLine":4,"endColumn":40},{"ruleId":"144","severity":1,"message":"173","line":110,"column":8,"nodeType":"156","endLine":110,"endColumn":23,"suggestions":"174"},{"ruleId":"144","severity":1,"message":"175","line":133,"column":8,"nodeType":"156","endLine":133,"endColumn":36,"suggestions":"176"},{"ruleId":"139","severity":1,"message":"177","line":1,"column":7,"nodeType":"141","messageId":"142","endLine":1,"endColumn":12},"no-native-reassign",["178"],"no-negated-in-lhs",["179"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["180"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["178"],["179"],"'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.","ArrayExpression",["181"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["182"],["178"],["179"],"'Knob' is defined but never used.","Expected '!==' and instead saw '!='.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'youtubeKey1' is assigned a value but never used.","'youtubeKey2' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.",["183"],"React Hook useEffect has missing dependencies: 'cantFind', 'createSearchQuery', 'getYoutubeVideo', and 'trackID'. Either include them or remove the dependency array. If 'cantFind' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["184"],"'cred1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},"Add dependencies array: [clock]",{"range":"195","text":"196"},"Update the dependencies array to be: [url, volume]",{"range":"197","text":"198"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"199","text":"200"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"201","text":"202"},"Update the dependencies array to be: [name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]",{"range":"203","text":"204"},[1631,1631],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]",[3903,3918],"[chosenVideoID, videoIDtoMP3]",[4641,4669],"[name, artists, duration_ms, trackID, createSearchQuery, getYoutubeVideo, cantFind]"]