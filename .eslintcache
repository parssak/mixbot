[{"/Users/parssa/Desktop/repos/mixbot/src/index.js":"1","/Users/parssa/Desktop/repos/mixbot/src/App.js":"2","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js":"3","/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js":"4","/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js":"5","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js":"6","/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js":"7","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js":"8","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js":"9","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js":"10","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js":"11","/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js":"12","/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js":"13","/Users/parssa/Desktop/repos/mixbot/src/Deck.js":"14","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js":"15","/Users/parssa/Desktop/repos/mixbot/src/api/keys.js":"16","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js":"17","/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js":"18","/Users/parssa/Desktop/repos/mixbot/src/Brain.js":"19"},{"size":500,"mtime":1609255907946,"results":"20","hashOfConfig":"21"},{"size":472,"mtime":1610317230984,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1609255907947,"results":"23","hashOfConfig":"21"},{"size":6165,"mtime":1610320411140,"results":"24","hashOfConfig":"21"},{"size":5085,"mtime":1610310292626,"results":"25","hashOfConfig":"21"},{"size":182,"mtime":1609255907943,"results":"26","hashOfConfig":"21"},{"size":9479,"mtime":1610319494398,"results":"27","hashOfConfig":"21"},{"size":570,"mtime":1609255907945,"results":"28","hashOfConfig":"21"},{"size":814,"mtime":1610305380930,"results":"29","hashOfConfig":"21"},{"size":550,"mtime":1609255907945,"results":"30","hashOfConfig":"21"},{"size":3782,"mtime":1609255907946,"results":"31","hashOfConfig":"21"},{"size":767,"mtime":1610248130668,"results":"32","hashOfConfig":"21"},{"size":535,"mtime":1610299742890,"results":"33","hashOfConfig":"21"},{"size":28121,"mtime":1610316293081,"results":"34","hashOfConfig":"21"},{"size":4780,"mtime":1609255907945,"results":"35","hashOfConfig":"21"},{"size":273,"mtime":1610318968025,"results":"36","hashOfConfig":"21"},{"size":415,"mtime":1610216081663,"results":"37","hashOfConfig":"21"},{"size":2256,"mtime":1610320388744,"results":"38","hashOfConfig":"21"},{"size":257,"mtime":1610318634231,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"11p3aqi",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/parssa/Desktop/repos/mixbot/src/index.js",[],["88","89"],"/Users/parssa/Desktop/repos/mixbot/src/App.js",["90","91"],"import React, {useState, useEffect} from 'react';\nimport './css_files/App.css';\nimport Mixbot from './Mixbot';\n\n\nfunction App() {\n    return(\n        <div className={\"body\"}>\n            <div className={\"title\"}>\n                <h1>MIXBOT</h1>\n                 <div className={\"credits\"}>\n                    <h3>An Open Source project by Parssa Kyanzadeh</h3> \n                 </div>\n            </div>\n            <Mixbot/>\n        </div>\n    );\n}\nexport default App;\n","/Users/parssa/Desktop/repos/mixbot/src/reportWebVitals.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackSelector.js",["92","93","94","95"],"/Users/parssa/Desktop/repos/mixbot/src/TrackFinder.js",["96","97","98","99","100","101"],"import React, {useEffect, useState} from 'react';\nimport youtubeApi from './api/youtube'\nimport videoDetailFinder from './api/youtubeVideoContent'\nimport {parse, end, toSeconds, pattern} from 'iso8601-duration';\n// import ytdl from \"react-native-ytdl\";\n\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the foundSong prop when a song has been found.\n *\n * @param name: Name of the Song\n * @param artists: An array of artist objects\n * @param duration_ms: The duration of the song in milliseconds\n * @param foundSong: A prop that gets called when song has been found\n * @param trackID:\n */\nlet lastChosenID = \"\";\nexport default function TrackFinder({name, artists, duration_ms, foundSong, trackID, trackImage}) {\n\n    const [songName, setSongName] = useState(name);\n    const [songArtists, setSongArtists] = useState(artists);\n    const [duration, setDuration] = useState(duration_ms);\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n\n    function createSearchQuery() {\n        console.log(\" -- Entered createSearchQuery -- \")\n        let artistNames = [];\n        artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = name + \" by \" + artistNames[0];\n        console.log(\"SEARCH QUERY:\",searchQuery);\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        console.log(\"--- Entered videosSearch ---\")\n        const response = await youtubeApi.get(\"/youtubeSearch\", { // TODO CHANGE THIS TO SERVER\n            params:{\n                q:search\n            }\n        })\n        return response;\n    }\n\n    async function videoDetail(videoID) {\n        const response = await videoDetailFinder.get(\"/youtubeDetail\", { // TODO CHANGE THIS TO SERVER\n            params:{\n                id:videoID\n            }\n        })\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            const videoList = e.data.items;\n            console.log(\"-- Entered getYoutubeVideo --\");\n            for (let video = 0; video < videoList.length; video++) {\n                const thisID = await videoDetail(videoList[video].id.videoId);\n                const thisDur = toMilli(thisID.data.items[0].contentDetails.duration);\n                if (Math.abs(duration - thisDur) <= 1000) {\n                    console.log(videoList[video]);\n                    setChosenVideoID(videoList[video].id.videoId);\n                    break;\n                }\n            }\n\n        }).finally(async () => {\n            if (chosenVideoID === \"\") {\n                // console.log(\"could not find song\");\n            } else {\n                // console.log(\"found song\")\n            }\n\n        })\n    }\n\n    /**\n     * Helper function for converting ISO8 8601 time to milliseconds\n     * @param ISO: ISO time\n     * @returns {the ISO time in milliseconds}\n     */\n    function toMilli(ISO) {\n        return toSeconds( parse(ISO) ) * 1000;\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n        console.log(\"| got youtube video ID, effect triggered | \")\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n\n    }, [chosenVideoID])\n\n    useEffect(async () => {\n        console.log(\"----- entered fx\");\n        setSongArtists(artists);\n        setSongName(name);\n        setDuration(duration_ms);\n        lastChosenID = \"\";\n        const search = createSearchQuery();\n        await getYoutubeVideo(search);\n    }, [name, artists, duration_ms]);\n\n    async function videoIDtoMP3(videoID) {\n        console.log(\"-- Entered videoIDtoMP3 -- with videoID:\", videoID);\n        videoDetailFinder.get('/youtubeMp3', {\n            params: {\n                id: videoID\n            }\n        }).then(response => {\n            console.log(\"got audioFormats!\");\n            let audioFormats = response.data;\n            console.log(audioFormats);\n            foundSong(songName, songArtists, duration, audioFormats[0].url, trackID, trackImage);\n            setChosenVideoID(\"\");\n        });\n        // await ytdl.getInfo(videoID, { quality: 'highestaudio'}).then(info => {\n        //     let audioFormats = ytdl.filterFormats(info.formats, 'audioonly');\n            // foundSong(songName, songArtists, duration, audioFormats[0].url, trackID, trackImage);\n            // setChosenVideoID(\"\");\n        // });\n    }\n\n    return null;\n}","/Users/parssa/Desktop/repos/mixbot/src/Credentials.js",[],"/Users/parssa/Desktop/repos/mixbot/src/TrackPlayer.js",["102","103","104","105","106","107","108"],"import React, { useEffect, useState } from 'react';\nimport Deck from \"./Deck\";\nimport './css_files/Queue.scss';\nimport { loadTrack, nextSongInQueue } from \"./Mixbot\";\n\nlet deck1playtime = NaN;\nlet deck2playtime = NaN;\n\nlet deck1startTime = 0;\nlet deck2startTime = 0;\n\nlet lastTrackSet = 0;\nlet mainTrack = 0;\n\nlet deck1lastBar = 0;\nlet deck2lastBar = 0;\n\nexport default function TrackPlayer() {\n    const [clock, setClock] = useState();\n\n    const [deck1Song, setDeck1Song] = useState('');\n    const [deck2Song, setDeck2Song] = useState('');\n\n    const [deck1BPM, setDeck1BPM] = useState(0);\n    const [deck2BPM, setDeck2BPM] = useState(0);\n\n    const [deck1playback, setDeck1playback] = useState(1);\n    const [deck2playback, setDeck2playback] = useState(1);\n\n    const [deck1prepared, setDeck1prepared] = useState(false);\n    const [deck2prepared, setDeck2prepared] = useState(false);\n\n    const [deck1Playing, setDeck1Playing] = useState(false);\n    const [deck2Playing, setDeck2Playing] = useState(false);\n\n    const [deck1offset, setDeck1offset] = useState(0);\n    const [deck2offset, setDeck2offset] = useState(0);\n\n    useEffect(() => {\n        console.log(\"-----------------player did update!-----------------\");\n        if (!clock) {\n            let newClock = new AudioContext();\n            setClock(newClock);\n            // console.log(\"current time is:\", newClock.currentTime);\n        } else {\n            // console.log(\"current time is:\", clock.currentTime);\n        }\n    })\n\n    useEffect(() => {\n        \n        if (nextSongInQueue() !== undefined) {\n            console.log(\"theres a song in the queue!\", nextSongInQueue);\n            if ((deck1BPM == 0) && (deck1Song == '')) {\n                // TODO BRAIN\n                console.log(\">> putting it in track a\");\n                loadTrackA();\n            } else if ((deck2BPM == 0) && (deck2Song == '')) {\n                // TODO BRAIN\n                console.log(\">> putting it in track b\");\n                loadTrackB();\n            }\n        }\n    })\n\n    function loadTrackA() {\n        let newSong = loadTrack();\n        setDeck1prepared(false);\n        setDeck1Playing(false);\n        if (newSong !== null) {\n            setDeck1BPM(Math.round(newSong.songAnalysis.data.track.tempo)) // terribly sus\n            console.log(\">>>>>            here comes the next song\", newSong);\n            if (deck2Song === '') {\n                setDeck1playback(1);\n            } else {\n                if (deck2BPM !== 0) {\n                    // console.log(\"deck1bpm is:\",newSong.songAnalysis.data.track.tempo,\"and\",\"deck2bpm is:\",deck2BPM)\n                    let ratio = (deck2BPM / newSong.songAnalysis.data.track.tempo).toPrecision(5);\n                    setDeck1playback(ratio);\n                } else {\n                    setDeck1playback(1);\n                }\n            }\n            console.log(\"> , --------------------------->> \", newSong);\n            setDeck1Song(newSong)\n        }\n        else {\n            console.log(\"new song was null\");\n        }\n    }\n\n    function loadTrackB() {\n        let newSong = loadTrack();\n        setDeck2prepared(false);\n        setDeck2Playing(false);\n        if (newSong !== null) {\n            setDeck2BPM(Math.round(newSong.songAnalysis.data.track.tempo)) // terribly sus\n            console.log(\">>>>>            here comes the next song\", newSong);\n            if (deck1Song === '') {\n                setDeck2playback(1);\n            } else {\n                if (deck1BPM !== 0) {\n                    let ratio = (deck1BPM / Math.round(newSong.songAnalysis.data.track.tempo)).toPrecision(5);\n                    setDeck2playback(ratio);\n                } else {\n                    setDeck2playback(1);\n                }\n            }\n            setDeck2Song(newSong)\n        } else {\n            console.log(\"new song was null\");\n        }\n    }\n\n    function deckOneReady() {\n        if (!deck1prepared) {\n            setDeck1prepared(true);\n            console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> SETTING D1READY\");\n            if (!deck2Playing) {\n                console.log(\"telling deck 1 to play\");\n                setDeck1Playing(true);\n            }\n        }\n    }\n\n    function deckTwoReady() {\n        if (!deck2prepared) {\n            setDeck2prepared(true);\n            console.log(\">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> SETTING D2READY\");\n            if (!deck1Playing) {\n                console.log(\"telling deck 2 to play\");\n                setDeck2Playing(true);\n            }\n        }\n    }\n\n    function playDeck2SongScheduled(timeoutValue) {\n        console.log(\"setting timeout for:\", timeoutValue);\n        setTimeout(function () {\n            console.log(clock.currentTime, deck2playtime);\n            console.log(\"checkin time bois\", deck2playtime - clock.currentTime);\n            if (deck2playtime - clock.currentTime <= 0) {\n                deck2startTime = deck2playtime - clock.currentTime;\n                setDeck2Playing(true);\n            } else {\n                console.log(deck2playtime - clock.currentTime);\n                if ((deck2playtime - clock.currentTime) <= 0.5) {\n                    console.log(\"case a \");\n                    playDeck2SongScheduled(500);\n                } else {\n                    console.log(\"case b \");\n                    playDeck2SongScheduled((deck2playtime - clock.currentTime) / 2);\n                }\n            }\n        }, timeoutValue)\n    }\n\n    function playTrackTwo() {\n        if (deck2prepared) {\n            console.log(\"+++ deck TWO is prepared, gonna play it!\");\n            setDeck2Playing(true);\n            setDeck2prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 2;\n                mainTrack = 1;\n            }\n        }\n    }\n\n    function playTrackOne() {\n        if (deck1prepared) {\n            console.log(\"+++ deck ONE is prepared, gonna play it!\");\n            setDeck1Playing(true);\n            setDeck1prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 1;\n                mainTrack = 1;\n            }\n\n        }\n    }\n\n    function hitBarD1() {\n        deck1lastBar = clock.currentTime;\n        if (deck2Playing) {\n            console.log(\"DECK1\", deck1offset);\n            setDeck1offset(deck2lastBar - deck1lastBar);\n        }\n    }\n\n    function hitBarD2() {\n        deck2lastBar = clock.currentTime;\n        if (deck1Playing) {\n            console.log(\"DECK2\", deck2offset);\n            setDeck2offset(deck1lastBar - deck2lastBar);\n        }\n    }\n\n    function changeTrackA() {\n        mainTrack = 2;\n        setDeck2playback(1);\n        loadTrackA();\n    }\n\n    function changeTrackB() {\n        mainTrack = 1;\n        setDeck1playback(1);\n        loadTrackB();\n    }\n\n    return (\n        <>\n            <div className={\"djboard\"}>\n                <div className={\"boardpanel\"} style={deck1Playing ? { boxShadow: \"0 3px 100px rgba(255, 99, 71, 0.3)\" } : { boxShadow: \"0 0 0 rgba(255, 99, 71, 0.3)\" }}>\n                    <h3>DECK A</h3>\n                    {deck1Song !== '' && <Deck\n                        thisSong={deck1Song.songURL}\n                        songName={deck1Song.songName}\n                        songArtist={deck1Song.songArtists[0].name}\n                        songImage={deck1Song.trackImage}\n                        songAnalysis={deck1Song.songAnalysis}\n                        playbackRate={deck1playback}\n                        prepared={deckOneReady}\n                        play={deck1Playing}\n                        startTime={deck1startTime}\n                        playOtherTrack={playTrackTwo}\n                        hitBar={hitBarD1}\n                        offset={deck1offset}\n                        deckName={\"Deck A\"}\n                        finished={changeTrackA}\n                        recommendedVolume={1}\n                        shouldSync={mainTrack !== 1}\n                        otherReady={deckTwoReady}\n                        waveformID={\"waveformA\"}\n                        bpm={deck1BPM}\n                    />\n                    }\n\n                </div>\n                <div className={\"boardpanel\"} style={deck2Playing ? { boxShadow: \"0 3px 100px rgba(255, 99, 71, 0.3)\" } : { boxShadow: \"0 0 0 rgba(255, 99, 71, 0.3)\" }}>\n                    <h3 style={{ textAlign: 'right' }}>DECK B</h3>\n                    {deck2Song !== '' && <Deck\n                        thisSong={deck2Song.songURL}\n                        songName={deck2Song.songName}\n                        songArtist={deck2Song.songArtists[0].name}\n                        songImage={deck2Song.trackImage}\n                        songAnalysis={deck2Song.songAnalysis}\n                        playbackRate={deck2playback}\n                        prepared={deckTwoReady}\n                        play={deck2Playing}\n                        startTime={deck2startTime}\n                        playOtherTrack={playTrackOne}\n                        hitBar={hitBarD2}\n                        offset={deck2offset}\n                        deckName={\"Deck B\"}\n                        finished={changeTrackB}\n                        recommendedVolume={1}\n                        shouldSync={mainTrack !== 2}\n                        otherReady={deckOneReady}\n                        waveformID={\"waveformB\"}\n                        bpm={deck2BPM}\n                    />}\n                </div>\n            </div>\n        </>\n    );\n}","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Detail.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Listbox.js",[],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Dropdown.js",["109"],"import React, {useState} from 'react';\n\nconst Dropdown = props => {\n\n    const dropdownChanged = e => {\n        props.changed(e.target.value);\n\n    }\n\n    return (\n        <div className=\"dropdown\">\n            <label>{props.label}</label>\n            <select value={props.selectedValue} onChange={dropdownChanged}>\n                <option key={0}>Select...</option>\n                {props.options.map((item, idx) => <option key={idx + 1} value={item.id}>{item.name}</option>)}\n            </select>\n        </div>\n    );\n}\n\nexport default Dropdown;\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Waveform.js",["110","111","112"],"import React, { useEffect, useRef, useState } from \"react\";\nimport WaveSurfer from 'wavesurfer.js';\n\n//https://codesandbox.io/s/audio-player-with-wavesurferjs-react-bd499?from-embed=&file=/src/Waveform.js:0-60\n\nexport default function Waveform({ url, onPositionChange, isPlaying, audioCtx, lowpassNum }) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n    const [volume, setVolume] = useState(0.5);\n    const formWaveSurferOptions = ref => ({\n        container: ref,\n        waveColor: \"#beb9b9\",\n        progressColor: \"#9a68c9\",\n        cursorColor: \"#dac4f0\",\n        hideScrollbar: true,\n        responsive: true,\n        partialRender: true,\n        normalize: true,\n        height:200\n    });\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = formWaveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n        wavesurfer.current.load(url.src);\n        wavesurfer.current.on(\"ready\", function() {\n            // https://wavesurfer-js.org/docs/methods.html\n            // wavesurfer.current.play();\n            // setPlay(true);\n\n            // make sure object still available when file loaded\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(volume);\n                setVolume(volume);\n            }\n            let lowpass = wavesurfer.backend.ac.createBiquadFilter();\n            lowpass.type = \"lowpass\";\n            lowpass.frequency.value = 10;\n            wavesurfer.current.backend.setFilter(lowpass);\n        });\n\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    useEffect(() => {\n        console.log(\"!!!\")\n        handlePlayPause();\n        console.log(wavesurfer.current.getFilters());\n        // if (isPlaying !== playing) {\n        //     handlePlayPause();\n        // }\n        // wavesurfer.current.on('audioprocess', function () {\n        //     // $('.waveform__counter').text( formatTime(wavesurfer.getCurrentTime()) );\n        //     // console.log(wavesurfer.current.getCurrentTime());\n        //     // console.log(\"--\")\n        //     onPositionChange(wavesurfer.current.getCurrentTime());\n        //\n        // });\n    }, [isPlaying]);\n\n    useEffect( () => {\n        console.log(\"lowpass\", lowpassNum);\n\n    }, [lowpassNum])\n\n\n    const handlePlayPause = () => {\n        console.log(\"switching this\");\n        setPlay(isPlaying);\n        wavesurfer.current.playPause();\n    };\n\n    // const onVolumeChange = e => {\n    //     const { target } = e;\n    //     const newVolume = +target.value;\n    //\n    //     if (newVolume) {\n    //         setVolume(newVolume);\n    //         wavesurfer.current.setVolume(newVolume || 1);\n    //     }\n    // };\n\n    return (\n        <div className={\"waveform-comp\"}>\n            <div id=\"waveform\" ref={waveformRef} />\n            <div className=\"controls\">\n                {/*<button onClick={handlePlayPause}>{!playing ? \"Play\" : \"Pause\"}</button>*/}\n                {/*<input*/}\n                {/*    type=\"range\"*/}\n                {/*    id=\"volume\"*/}\n                {/*    name=\"volume\"*/}\n                {/*    // waveSurfer recognize value of `0` same as `1`*/}\n                {/*    //  so we need to set some zero-ish value for silence*/}\n                {/*    min=\"0.01\"*/}\n                {/*    max=\"1\"*/}\n                {/*    step=\".025\"*/}\n                {/*    onChange={onVolumeChange}*/}\n                {/*    defaultValue={volume}*/}\n                {/*/>*/}\n            </div>\n        </div>\n    );\n}",["113","114"],"/Users/parssa/Desktop/repos/mixbot/src/api/youtubeVideoContent.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/youtube.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Deck.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131"],"import React, { Component } from 'react';\nimport Knob from './frontend_components/Knob';\nimport WaveSurfer from 'wavesurfer.js';\nimport RegionPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport './css_files/Deck.scss';\n\nconst DROP = 'DROP';\nconst BEGIN = 'BEGIN';\nconst COMEDOWN = 'COMEDOWN';\nconst UNSURE = 'UNSURE';\nconst REGULAR = 'REG';\n\nlet barSize = 0;\nlet xhr = { cache: 'default', mode: 'cors', method: 'GET', credentials: 'same-origin', redirect: 'follow', referrer: 'client', headers: [{ 'Access-Control-Allow-Origin': '*' }] };\n\nexport default class Deck extends Component {\n    constructor(props) {\n        super(props);\n        console.log(\"entered constructor call!\");\n        this.state = {\n            pos: 0,\n            locked: false,\n            scheduledDemise: false,\n            currSec: \"NOT PLAYING\",\n            playing: false,\n            trackName: this.props.songName,\n            trackArtist: this.props.songArtist,\n            audioCtx: new AudioContext(),\n            // audioElement: new Audio(this.props.thisSong),\n            audioSettings: {\n                gain: 1,\n                lowpassF: 11000,\n                highpassF: 0,\n                high: 1,\n                mid: 1,\n                low: 1,\n                playbackRate: this.props.playbackRate\n            },\n            currSectionAnalysis: {\n                begin: NaN,\n                endpoint: NaN,\n                comparisonLoudness: NaN,\n                differential: NaN,\n                sectionConfidence: NaN,\n                conformedBegin: NaN,\n                conformedEnd: NaN,\n                oBegin: NaN,\n                oEnd: NaN,\n                sectionColor: `rgb(255,255,255)`,\n                goodForMix: false,\n                isBest: false\n            },\n            startingPos: 0\n        };\n\n        this.waveSurferOptions = {\n            container: `#${this.props.waveformID}`,\n            waveColor: \"#ffffff\",\n            cursorColor: \"tomato\",\n            hideScrollbar: true,\n            normalize: true,\n            height: 70,\n            barWidth: 1,\n            barHeight: 0.5, // the height of the wave\n            barRadius: 2,\n            plugins: [\n                RegionPlugin.create(),\n            ],\n            xhr: xhr\n        }\n\n\n\n        this.lastAdjustTime = 0;\n        this.synced = false;\n        this.fadingOut = false;\n        this.fadingIn = false;\n        this.totalOffset = 0;\n        this.numSuccessful = 0;\n        this.numDropsPassed = 0;\n\n\n        this.playPause = this.playPause.bind(this);\n        this.fadeOutSong = this.fadeOutSong.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.changeGain = this.changeGain.bind(this);\n        this.reconnectAudio = this.reconnectAudio.bind(this);\n        this.analyzeData = this.analyzeData.bind(this);\n        this.handlePosChange = this.handlePosChange.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"|| ---- COMPONENT DID MOUNT ---- ||\", this.props.deckName);\n        // wavesurfer begins here\n        this.waveform = WaveSurfer.create(this.waveSurferOptions);\n\n\n        this.waveform.on('loading', e => {\n            console.log(\"loading:\", e);\n        })\n\n        this.waveform.on('error', e => {\n            console.log(\"hit error:\", e);\n        })\n        \n        // this.state.audioElemen1t.crossOrigin = \"anonymous\";\n        \n        // let song = new Audio();\n        // song.crossOrigin = \"anonymous\";\n        // song.src = this.props.thisSong;\n        \n        // this.waveform.load(song);\n        console.log(\"MOUNT THISSONG>>>\",this.props.thisSong);\n        let dummy = new Audio(this.props.thisSong);\n        // console.log(\">>>!!!>>>\", dummy.src);\n        // console.log(\">>>>!!!!???\", dummy.src === this.props.thisSong);\n        this.waveform.load(this.props.thisSong);\n\n        // console.log(this.props.thisSong);\n        // let ooga = this.props.thisSong;\n        // console.log(\"ooga is:\", ooga);\n        // console.log(\"song src WAS:\", song.src);\n        // // song.src = this.props.thisSong;\n        // song.crossOrigin = \"anonymous\";\n        // console.log(\"loading song in mount >>>!\", this.props.thisSong);\n        \n        // this.waveform.load(\"http://ia902606.us.archive.org/35/items/shortpoetry_047_librivox/song_cjrg_teasdale_64kb.mp3\");\n        console.log(\"loaded song\", this.waveform.src);\n        this.waveform.setPlaybackRate(this.props.playbackRate);\n        this.reconnectAudio();\n    }\n\n    componentDidUpdate(prevProps) {\n        console.log(\"||| ---- COMPONENT DID UPDATE ---- |||\", this.props.deckName);\n        console.log(\"TRACK IMG:\", this.props.songImage)\n        if (this.props.thisSong !== prevProps.thisSong) { // TODO LEFT OFF HERE, YOU WERE TRYING TO MAKE SWITCHING SONGS ON A SINGLE DECK WORK BC IT KEEPS PLAYING THE OLD ONE ALSO REGIONS AREN\"T DISAPPEARING\n            console.log(\"|| -- THE SONG CHANGED -- ||\", this.props.deckName);\n            this.waveform.pause();\n\n            this.synced = false;\n            this.numSuccessful = 0;\n            this.totalOffset = 0;\n            this.fadingOut = false;\n            this.fadingIn = false;\n            this.numDropsPassed = 0;\n\n            this.waveform.destroy();\n\n            this.waveform = WaveSurfer.create(this.waveSurferOptions);\n            this.waveform.on('loading', e => {\n                console.log(\"loading:\", e);\n            })\n\n            this.waveform.on('error', e => {\n                console.log(\"hit error:\", e);\n            })\n\n\n            console.log(\"loading song in update >>>!\", this.props.thisSong);\n            let dummy = new Audio(this.props.thisSong);\n            this.waveform.load(dummy.src);\n            // this.state.audioElement.load();\n            // this.state.audioElement = new Audio(this.props.thisSong);\n            // this.state.audioElement.crossOrigin = \"anonymous\";\n\n            // this.waveform.load(this.state.audioElement.src);\n\n            // let song = new Audio(this.props.thisSong);\n            // song.crossOrigin = \"anonymous\";\n            // this.waveform.load(song);\n\n            this.waveform.setPlaybackRate(this.props.playbackRate);\n\n            this.reconnectAudio();\n        } else {\n            console.log(\"SONG DIDN'T CHANGE\");\n        }\n\n        if (this.state.audioCtx.state !== 'suspended') {\n            if (this.props.play !== this.waveform.isPlaying()) {\n                if (!this.props.play) {\n                    console.log(\"~~~ SHOULD BE PAUSED NGL ~~~\");\n                    this.waveform.pause();\n                } else {\n                    this.playPause();\n                }\n            }\n        }\n\n        if (!this.props.shouldSync) this.synced = true; // If this is the main track, don't sync it\n\n        // If the offset between tracks is under 0.1 seconds and this is playing, this track is succesful\n\n        // ! The margin of error of 0.1s is needed due to timing issues with WebAudio\n\n        if (Math.abs(this.props.offset) < 0.1 && this.waveform.isPlaying()) {\n            this.numSuccessful++;\n            if (Math.abs(this.props.offset) < 0.05) this.numSuccessful++;\n            if (this.numSuccessful >= 3) {\n                this.synced = true;\n            }\n        }\n\n        /**\n         * IF:\n         *  1) New offset passed in\n         *  2) It has been over 5 seconds since the last time it was adjusted\n         */\n        if (this.props.offset !== prevProps.offset &&\n            this.waveform.getCurrentTime() - this.lastAdjustTime > 5 &&\n            Math.abs(this.props.offset) >= 0.05 &&\n            !this.synced) {\n            this.numSuccessful = 0;\n            console.log(this.props.deckName, \"-> about to sync\");\n            if (this.waveform.getCurrentTime() + this.props.offset > 1 && this.props.offset != 0) {\n                this.lastAdjustTime = this.waveform.getCurrentTime();\n                let adjustedOffset = this.props.offset;\n                this.totalOffset = this.props.offset;\n                console.log(\"%%%   \", this.props.deckName, \"total offset:\", this.totalOffset, \"which is\", this.totalOffset / barSize, \"bars\");\n                let desiredTime = this.waveform.getCurrentTime() + this.props.offset;\n                console.log(\"%%%   \", this.props.deckName, \" song pos was at:\", this.waveform.getCurrentTime(), \"we need:\", desiredTime);\n                this.waveform.pause();\n                this.waveform.skip(adjustedOffset);\n                this.waveform.playPause();\n                console.log(\"%%%   \", this.props.deckName, \" now we are at:\", this.waveform.getCurrentTime(), \"difference is:\", desiredTime - this.waveform.getCurrentTime(), \"offset diff:\", (this.props.offset - desiredTime - this.waveform.getCurrentTime()));\n            } else {\n                console.log(this.props.deckName, \"-> didn't sync \");\n            }\n        }\n    }\n\n    analyzeData() {\n        let sectionArray = this.props.songAnalysis.data.sections;\n        let baselineLoudness = this.props.songAnalysis.data.track.loudness;\n        let allBars = this.props.songAnalysis.data.bars;\n        // let bpm = this.props.songAnalysis.data.track.tempo;\n        // let timeSig = Math.round(this.props.songAnalysis.data.track.time_signature);\n\n        let songSections = [];\n        // let numSections = sectionArray.length;\n        let currSection = 0;\n\n        // song analysis variables\n        // let numDrops = 0;\n        // let mostConfidentDrop = 0;\n\n        // let numComedowns = 0;\n        // let mostConfidentComedown = 0;\n\n        // get an array of when all bars start\n        let barStartArray = []\n\n        let bar = this.props.songAnalysis.data.bars[0].duration;\n        let barConfidence = 0;\n        allBars.forEach(e => {\n            if (e.confidence > barConfidence) {\n                bar = e.duration;\n                barConfidence = e.confidence;\n            }\n        })\n        barSize = bar;\n        let barlength32 = bar * 2;\n        let songDuration = this.props.songAnalysis.data.track.duration;\n\n        let num32Bar = ((songDuration) / barlength32);\n\n        for (let a = 0; a <= num32Bar; a++) {\n            barStartArray.push(((a) * barlength32));\n        }\n\n        let calibrationArray = [];\n\n        let numCalibrationChunks = (songDuration) / bar;\n\n        for (let c = 0; c <= numCalibrationChunks; c++) {\n            calibrationArray.push(((c) * bar));\n        }\n\n\n        for (let b = 0; b < calibrationArray.length - 1; b++) {\n            // let barColor = (b % 2 ? \"rgba(255, 60, 54,0.05)\" : \"rgba(46, 255, 154,0.05)\");\n            let barRegion = {\n                start: calibrationArray[b],\n                end: calibrationArray[b + 1],\n                // color: barColor,\n                drag: false,\n                resize: false,\n                computed: {}\n            };\n            this.waveform.addRegion(barRegion);\n        }\n\n        sectionArray.forEach(e => {\n            currSection++;\n            let sectionType = REGULAR;\n            let is32length = false;\n\n            let comparisonLoudness = (e.loudness - baselineLoudness) / baselineLoudness;\n\n            // IF BEGINNING OF SONG\n            if (songSections.length === 0) {\n                sectionType = BEGIN;\n            }\n\n            // IF LOUD === DROP\n            if (comparisonLoudness < 0) {\n                sectionType = DROP;\n            }\n\n            // IF LAST SONG WAS DROP AND DIFFERENTIAL OF THIS IS NEGATIVE === COMEDOWN\n            let diff = 0;\n            if (songSections.length > 0) {\n                diff = songSections[songSections.length - 1].computed.comparisonLoudness - comparisonLoudness;\n                if (songSections[songSections.length - 1].sectionType === DROP) {\n                    if (sectionType === DROP) {\n                        sectionType = UNSURE;\n                    } else {\n                        sectionType = COMEDOWN\n                    }\n                }\n            }\n\n            let beginpoint = e.start;\n            let endpoint = e.start + e.duration;\n            let closestEnd = closest(endpoint, barStartArray);\n            let closestBegin = closest(beginpoint, barStartArray);\n            let offsetBegin = closestBegin - beginpoint;\n            let offsetEnd = closestEnd - endpoint;\n            let acceptedConformEnd = false;\n            let acceptedConformBegin = false;\n\n            beginpoint = closestBegin;\n            endpoint = closestEnd;\n\n\n            let sizeComparison = ((endpoint - beginpoint) / barlength32).toPrecision(2); // checks if section is of calculated 32bar length\n            if (sizeComparison % 1) {\n                is32length = true;\n            }\n\n            let randomColor = 'rgba(162,254,231,0.3)';\n            switch (sectionType) {\n                case \"\":\n                    break;\n                case BEGIN:\n                    // toLoop = true;\n                    randomColor = 'rgba(50,255,155,0.3)';\n                    if (is32length) {\n                        randomColor = 'rgba(100,255,55,0.3)';\n                    }\n                    break;\n                case DROP:\n                    randomColor = 'rgba(237,61,155,0.3)';\n                    if (is32length) {\n                        randomColor = 'rgba(255,31,105,0.3)';\n                    }\n                    break;\n                case COMEDOWN:\n                    randomColor = 'rgba(123,215,255,0.3)'\n                    if (is32length) {\n                        randomColor = 'rgba(50,150,255,0.3)'\n                    }\n                    break;\n                case UNSURE:\n                    randomColor = 'rgba(34,1,255,0.2)'\n                    if (is32length) {\n                        randomColor = 'rgba(0,255,150,0.2)'\n                    }\n                    break;\n                default:\n                    break;\n            }\n\n            let goodForMix = false;\n            if (sectionType !== DROP) {\n                if (comparisonLoudness > 0 && comparisonLoudness < 0.1) {\n                    randomColor = 'rgba(218, 165, 32,0.3)';\n                    goodForMix = true;\n                } else if (sectionType === BEGIN) {\n                    randomColor = 'rgba(218, 165, 32,0.3)';\n                    goodForMix = true;\n                }\n            }\n            // ! THIS IS FOR UI PURPOSES REMOVE THIS WHEN TESTING\n            randomColor = 'rgba(0, 0, 0, 0)';\n\n            let analysisSection = {\n                sectionType: sectionType,\n                begin: beginpoint,\n                endpoint: endpoint,\n                computed: {\n                    comparisonLoudness: comparisonLoudness,\n                    differential: diff,\n                    sectionConfidence: e.confidence,\n                    conformedBegin: acceptedConformBegin,\n                    conformedEnd: acceptedConformEnd,\n                    oBegin: offsetBegin,\n                    oEnd: offsetEnd\n                },\n                sizeComparison: sizeComparison,\n                is32: is32length,\n                sectionColor: randomColor,\n                goodForMix: goodForMix\n            }\n            songSections.push(analysisSection);\n        })\n\n        if (songSections.length > 2) {\n            console.log(\"sec1:\", songSections[0].sizeComparison, \"sec2:\", songSections[1].sizeComparison);\n            console.log(\"sec1:\", songSections[0].is32, \"sec2:\", songSections[1].is32);\n            if ((songSections[0].sizeComparison == 4) || (songSections[0].sizeComparison == 2 && songSections[1].sizeComparison == 2)) {\n                console.log(\"CASE A START POS\");\n                this.setState({\n                    startingPos: 0\n                })\n            } else if (songSections[0].sizeComparison == 2.0) { // todo make this if songSections[1].sizeComparison is a multiple of 4\n                console.log(\"CASE B START POS\");\n                console.log(\"mult of 4?\", songSections[1].sizeComparison % 4);\n                this.setState({\n                    startingPos: songSections[0].endpoint\n                })\n            } else {\n                console.log(\"CASE C START POS\");\n            }\n        }\n\n        return songSections;\n    }\n\n    reconnectAudio() {\n        // this.state.audi1oElement.crossOrigin = \"anonymous\";\n        console.log(\"reconnecting audio\");\n        // LOWPASS\n        let lowpass = this.waveform.backend.ac.createBiquadFilter();\n        lowpass.frequency.value = this.state.audioSettings.lowpassF || 11000;\n        lowpass.type = \"lowpass\";\n        lowpass.Q.value = 5;\n        this.setState({\n            lowpassNode: lowpass\n        });\n\n        // HIGHPASS\n        let highpass = this.waveform.backend.ac.createBiquadFilter();\n        highpass.frequency.value = this.state.audioSettings.highpassF || 0;\n        highpass.type = \"highpass\";\n        highpass.Q.value = 5;\n        this.setState({\n            highpassNode: highpass\n        });\n\n        // GAIN\n        let gain = this.waveform.backend.ac.createGain();\n        gain.value = this.state.audioSettings.gain || 0.01;\n        this.setState({\n            gainNode: gain\n        });\n        this.waveform.backend.setFilter(lowpass, highpass);\n\n        if (this.props.songAnalysis !== 'NOTFOUND') {\n\n            let analyzed = this.analyzeData();\n\n            //! Getting the best of each region\n            let bestReg;\n            let bestDrop;\n            let bestComedown;\n            let bestOverall;\n\n            let bestRegNum = 0;\n            let bestDropNum = 0;\n            let bestComedownNum = 0;\n            let bestOverallNum = 0;\n\n            let bestRegColor = \"rgb(158, 31, 255)\" // royal purple\n            let bestDropColor = \"rgb(242, 123, 31)\"; // orange\n            let bestComedownColor = \"rgb(185, 245, 66)\"; // lime\n            let bestOverallColor = \"rgb(66, 245, 191)\"; // teal\n            let cs = 0; // currsection\n            analyzed.forEach(e => {\n                // console.log(e);\n                if (e.sectionConfidence > bestOverallNum) {\n                    bestOverallNum = e.sectionConfidence;\n                    bestOverall = cs;\n                }\n\n                switch (e.sectionType) {\n                    case DROP:\n                        if (e.sectionConfidence > bestDropNum) {\n                            bestDropNum = e.sectionConfidence;\n                            bestDrop = cs;\n                        }\n                        break;\n                    case REGULAR:\n                        if (e.sectionConfidence > bestRegNum) {\n                            bestRegNum = e.sectionConfidence;\n                            bestReg = cs;\n                        }\n                        break;\n                    case COMEDOWN:\n                        if (e.sectionConfidence > bestComedownNum) {\n                            bestComedownNum = e.sectionConfidence;\n                            bestComedown = cs;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                cs++;\n            })\n            let cs1 = 0;\n            analyzed.forEach(section => {\n                let thisSectionColor = section.sectionColor;\n                let isBest = false;\n                switch (section.sectionType) {\n                    case DROP:\n                        section.endpoint -= 0.1;\n                        if (cs1 === bestDrop) {\n                            thisSectionColor = bestDropColor;\n                            isBest = true;\n                        }\n                        break;\n                    case REGULAR:\n                        if (cs1 === bestReg) {\n                            thisSectionColor = bestRegColor;\n                            isBest = true;\n                        }\n                        break;\n                    case COMEDOWN:\n                        if (cs1 === bestComedown) {\n                            thisSectionColor = bestComedownColor;\n                            isBest = true;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n\n                if (cs1 === bestOverall) {\n                    thisSectionColor = bestOverallColor;\n                }\n\n                let region = {\n                    start: section.begin,\n                    end: section.endpoint,\n                    attributes: section.computed,\n                    data: section,\n                    color: thisSectionColor,\n                    drag: false,\n                    resize: false,\n                    isBest: isBest\n                }\n                this.waveform.addRegion(region);\n                cs1++;\n            })\n        }\n        this.waveform.on('region-in', e => {\n            this.props.hitBar();\n            if (e.data.sectionType !== undefined) { // has data!\n                if (e.data.sectionType === DROP) {\n                    this.numDropsPassed++;\n                }\n            }\n        })\n\n        this.waveform.on('region-out', e => {\n            let thisSection = e.data;\n            let computed = thisSection.computed;\n            if (computed) {\n                this.setState({\n                    currSec: thisSection.sectionType,\n                    currSectionAnalysis: {\n                        begin: thisSection.begin,\n                        endpoint: thisSection.endpoint,\n                        comparisonLoudness: computed.comparisonLoudness,\n                        differential: computed.differential,\n                        sectionConfidence: computed.sectionConfidence,\n                        conformedBegin: computed.comformedBegin,\n                        conformedEnd: computed.comformedEnd,\n                        oBegin: computed.oBegin,\n                        oEnd: computed.oEnd,\n                        sectionColor: thisSection.sectionColor,\n                        goodForMix: thisSection.goodForMix,\n                        isBest: thisSection.isBest,\n                        sizeComparison: thisSection.sizeComparison,\n                        is32: thisSection.is32\n                    }\n                })\n\n                if (thisSection.sectionType === DROP && this.numDropsPassed > 1 && this.props.otherReady) {\n                    this.props.playOtherTrack();\n                    this.fadeOutSong();\n                }\n            } else {\n                this.props.hitBar();\n            }\n        });\n\n        this.waveform.on('ready', e => {\n            console.log(\"------ READY TO GO! 1 ------\");\n            this.state.audioCtx.resume();\n            if (!this.waveform.isPlaying()) {\n                this.playPause();\n                this.props.prepared();\n            }\n            this.waveform.setVolume(0.1);\n        });\n\n        this.waveform.on('play', e => {\n            console.log(this.props.deckName, \" JUST STARTED PLAYING GONNA FADE IT IN NOW OK\");\n            this.waveform.setVolume(0.1);\n            this.fadeInSong();\n        })\n\n    }\n\n    playPause() {\n        // check if context is in suspended state (autoplay policy)\n        if (this.state.audioCtx.state === 'suspended') {\n            this.state.audioCtx.resume();\n\n        }\n        this.waveform.play(this.state.startingPos);\n        if (this.state.playing !== this.waveform.isPlaying()) {\n            this.setState({\n                playing: this.waveform.isPlaying()\n            });\n        }\n    }\n\n    changeFilter(amount) {\n        if (amount <= 14000) {\n            this.state.audioSettings.lowpassF = amount;\n            this.state.lowpassNode.frequency.value = amount;\n        } else if (amount >= 20000) {\n            let highpassAmount = amount - 20000;\n            this.state.audioSettings.highpassF = highpassAmount;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        } else {\n            this.state.audioSettings.lowpassF = 30000;\n            this.state.lowpassNode.frequency.value = this.state.audioSettings.lowpassF;\n            this.state.audioSettings.highpassF = 0;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        }\n    }\n\n    changeGain(amount) {\n        // console.log(\"this ran\")\n        this.setState({\n            audioSettings: {\n                gain: (amount / 100).toPrecision(2)\n            }\n        })\n        this.waveform.setVolume((amount / 100).toPrecision(2) || 1);\n    }\n\n    handlePosChange(e) {\n        this.setState({\n            pos: e\n        });\n    }\n\n    fadeOutSong() {\n        console.log(\"fading out\");\n        this.fadingOut = true;\n        this.waveform.setVolume(lerp(this.waveform.getVolume(), 0, Math.max(this.waveform.getVolume() / 2), 0.1, this.props.deckName));\n        this.state.lowpassNode.frequency.value -= (this.state.lowpassNode.frequency.value / 10);\n        if (this.waveform.getVolume() < 0.2) this.waveform.setVolume(this.waveform.getVolume() - 0.03);\n        if (this.waveform.getVolume() > 0.001) {\n            setTimeout(() => {\n                this.fadeOutSong();\n            }, 1000);\n        } else {\n            console.log(\">>>>>>>   >>> \", this.props.deckName, \" FADED OUT_________\");\n            this.fadingOut = false;\n            this.waveform.setVolume(0);\n            this.waveform.pause();\n            this.props.finished();\n        }\n    }\n\n    fadeInSong() {\n        console.log(\"*****\", this.props.deckName, \"fading in\", this.props.recommendedVolume);\n        this.fadingIn = true;\n        console.log(this.props.recommendedVolume);\n        this.waveform.setVolume(lerp(this.waveform.getVolume(), this.props.recommendedVolume, Math.min((this.waveform.getVolume()) / 4), 0.05, this.props.deckName));\n        // if (this.waveform.getVolume() < 0.2) this.waveform.setVolume(this.waveform.getVolume() - 0.03);\n        if (this.waveform.getVolume() < this.props.recommendedVolume - 0.1) {\n            setTimeout(() => {\n                this.fadeInSong();\n            }, 1000);\n        } else {\n            console.log(\">>>>>>>  !!!  >>> \", this.props.deckName, \" FADED IN_________!!!!\");\n            this.fadingIn = false;\n            this.waveform.setVolume(this.props.recommendedVolume);\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <div className={\"deck\"}>\n                    <img src={this.props.songImage.url} alt=\"\" />\n                    <div className={\"deck-content\"}>\n                        <div className={\"deck-text\"}>\n                            {this.props.songName !== \"\" && <h2>{this.props.songName}</h2>}\n                            {this.props.songName !== \"\" && <h3>{this.props.songArtist}</h3>}\n                        </div>\n                        <div className={\"deck-text\"}>\n                            <h4>{this.props.bpm} BPM</h4>\n                            {/* <h4>{this.props.bpm} BPM</h4> */}\n                        </div>\n                        <div id={`${this.props.waveformID}`} />\n                    </div>\n                    {/* <Knob size={70} numTicks={70} degrees={260} min={0} max={100} value={50} color={true} onChange={this.changeGain} />\n                    <label>GAIN</label>\n                    <Knob size={70} numTicks={70} degrees={260} min={1000} max={30000} value={15000} color={true} onChange={this.changeFilter} />\n                    <label>FILTER</label> */}\n                    {/* <button className={\"playButton\"} onClick={() => { this.playPause() }}>{this.state.playing ? \"Pause\" : \"Play\"}</button> */}\n\n                </div>\n            </>\n        );\n    }\n}\n\n\nfunction closest(needle, haystack) {\n    let closeGrain = 100000000000000;\n    let grainCloseness = 100000000000000;\n    haystack.forEach(grain => {\n        let thisCloseness = Math.abs(needle - grain)\n        if (Math.abs(needle - grain) < grainCloseness) {\n            grainCloseness = thisCloseness;\n            closeGrain = grain;\n        }\n    })\n    return closeGrain;\n}\n\nfunction lerp(start, end, amt, deckname) {\n    console.log(deckname, \"lerped this:\", start, end, amt, \"to:\", (1 - amt) * start + amt * end);\n    return (1 - amt) * start + amt * end\n}\n\n","/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Knob.js",[],"/Users/parssa/Desktop/repos/mixbot/src/api/keys.js",["132","133"],"const youtubeKey1 = \"AIzaSyC6F5gJnOX3mS2dl5-b_82PQ2ow7Xikuw8\"; // NotMixBot\n\nconst youtubeKey2 = \"AIzaSyCt7QrJ3-iInh6822WGi3Igo8J9gpH2WyA\"; // ThirdBot\n\nconst youtubeKey3 = \"AIzaSyBpT_RmX3P3wp_OMxiJT0SZIhkqFwMfVrA\"; // not set up yet\n\nexport const currentKey = youtubeKey1;",["134","135"],"/Users/parssa/Desktop/repos/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/Desktop/repos/mixbot/src/Mixbot.js",["136"],"/Users/parssa/Desktop/repos/mixbot/src/Brain.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":24},{"ruleId":"141","severity":1,"message":"145","line":1,"column":26,"nodeType":"143","messageId":"144","endLine":1,"endColumn":35},{"ruleId":"141","severity":1,"message":"146","line":2,"column":8,"nodeType":"143","messageId":"144","endLine":2,"endColumn":16},{"ruleId":"141","severity":1,"message":"147","line":10,"column":7,"nodeType":"143","messageId":"144","endLine":10,"endColumn":18},{"ruleId":"141","severity":1,"message":"148","line":47,"column":14,"nodeType":"143","messageId":"144","endLine":47,"endColumn":26},{"ruleId":"141","severity":1,"message":"149","line":64,"column":14,"nodeType":"143","messageId":"144","endLine":64,"endColumn":29},{"ruleId":"141","severity":1,"message":"150","line":1,"column":8,"nodeType":"143","messageId":"144","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"151","line":4,"column":16,"nodeType":"143","messageId":"144","endLine":4,"endColumn":19},{"ruleId":"141","severity":1,"message":"152","line":4,"column":32,"nodeType":"143","messageId":"144","endLine":4,"endColumn":39},{"ruleId":"153","severity":1,"message":"154","line":114,"column":8,"nodeType":"155","endLine":114,"endColumn":23,"suggestions":"156"},{"ruleId":"153","severity":1,"message":"157","line":116,"column":15,"nodeType":"158","endLine":124,"endColumn":6},{"ruleId":"153","severity":1,"message":"159","line":124,"column":8,"nodeType":"155","endLine":124,"endColumn":36,"suggestions":"160"},{"ruleId":"141","severity":1,"message":"161","line":6,"column":5,"nodeType":"143","messageId":"144","endLine":6,"endColumn":18},{"ruleId":"153","severity":1,"message":"162","line":39,"column":5,"nodeType":"143","endLine":39,"endColumn":14,"suggestions":"163"},{"ruleId":"164","severity":1,"message":"165","line":54,"column":27,"nodeType":"166","messageId":"167","endLine":54,"endColumn":29},{"ruleId":"164","severity":1,"message":"165","line":54,"column":47,"nodeType":"166","messageId":"167","endLine":54,"endColumn":49},{"ruleId":"164","severity":1,"message":"165","line":58,"column":34,"nodeType":"166","messageId":"167","endLine":58,"endColumn":36},{"ruleId":"164","severity":1,"message":"165","line":58,"column":54,"nodeType":"166","messageId":"167","endLine":58,"endColumn":56},{"ruleId":"141","severity":1,"message":"168","line":152,"column":21,"nodeType":"143","messageId":"144","endLine":152,"endColumn":43},{"ruleId":"141","severity":1,"message":"142","line":1,"column":16,"nodeType":"143","messageId":"144","endLine":1,"endColumn":24},{"ruleId":"141","severity":1,"message":"169","line":9,"column":12,"nodeType":"143","messageId":"144","endLine":9,"endColumn":19},{"ruleId":"153","severity":1,"message":"170","line":50,"column":8,"nodeType":"155","endLine":50,"endColumn":13,"suggestions":"171"},{"ruleId":"153","severity":1,"message":"172","line":66,"column":8,"nodeType":"155","endLine":66,"endColumn":19,"suggestions":"173"},{"ruleId":"137","replacedBy":"174"},{"ruleId":"139","replacedBy":"175"},{"ruleId":"141","severity":1,"message":"176","line":2,"column":8,"nodeType":"143","messageId":"144","endLine":2,"endColumn":12},{"ruleId":"141","severity":1,"message":"177","line":114,"column":13,"nodeType":"143","messageId":"144","endLine":114,"endColumn":18},{"ruleId":"164","severity":1,"message":"178","line":215,"column":93,"nodeType":"166","messageId":"167","endLine":215,"endColumn":95},{"ruleId":"141","severity":1,"message":"179","line":294,"column":13,"nodeType":"143","messageId":"144","endLine":294,"endColumn":24},{"ruleId":"164","severity":1,"message":"165","line":411,"column":49,"nodeType":"166","messageId":"167","endLine":411,"endColumn":51},{"ruleId":"164","severity":1,"message":"165","line":411,"column":90,"nodeType":"166","messageId":"167","endLine":411,"endColumn":92},{"ruleId":"164","severity":1,"message":"165","line":411,"column":129,"nodeType":"166","messageId":"167","endLine":411,"endColumn":131},{"ruleId":"164","severity":1,"message":"165","line":416,"column":55,"nodeType":"166","messageId":"167","endLine":416,"endColumn":57},{"ruleId":"180","severity":1,"message":"181","line":632,"column":13,"nodeType":"182","endLine":632,"endColumn":37},{"ruleId":"180","severity":1,"message":"181","line":633,"column":13,"nodeType":"182","endLine":633,"endColumn":45},{"ruleId":"180","severity":1,"message":"181","line":636,"column":13,"nodeType":"182","endLine":636,"endColumn":37},{"ruleId":"180","severity":1,"message":"181","line":637,"column":13,"nodeType":"182","endLine":637,"endColumn":46},{"ruleId":"180","severity":1,"message":"181","line":639,"column":13,"nodeType":"182","endLine":639,"endColumn":37},{"ruleId":"180","severity":1,"message":"181","line":640,"column":13,"nodeType":"182","endLine":640,"endColumn":45},{"ruleId":"180","severity":1,"message":"181","line":641,"column":13,"nodeType":"182","endLine":641,"endColumn":37},{"ruleId":"180","severity":1,"message":"181","line":642,"column":13,"nodeType":"182","endLine":642,"endColumn":46},{"ruleId":"180","severity":1,"message":"181","line":666,"column":9,"nodeType":"182","endLine":666,"endColumn":41},{"ruleId":"141","severity":1,"message":"183","line":3,"column":7,"nodeType":"143","messageId":"144","endLine":3,"endColumn":18},{"ruleId":"141","severity":1,"message":"184","line":5,"column":7,"nodeType":"143","messageId":"144","endLine":5,"endColumn":18},{"ruleId":"137","replacedBy":"185"},{"ruleId":"139","replacedBy":"186"},{"ruleId":"164","severity":1,"message":"165","line":75,"column":35,"nodeType":"166","messageId":"167","endLine":75,"endColumn":37},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Dropdown' is defined but never used.","'euroHouseID' is assigned a value but never used.","'genreChanged' is defined but never used.","'playlistChanged' is defined but never used.","'React' is defined but never used.","'end' is defined but never used.","'pattern' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'videoIDtoMP3'. Either include it or remove the dependency array.","ArrayExpression",["189"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'createSearchQuery' and 'getYoutubeVideo'. Either include them or remove the dependency array.",["190"],"'deck1playtime' is assigned a value but never used.","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["191"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'playDeck2SongScheduled' is defined but never used.","'playing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'volume'. Either include it or remove the dependency array. You can also do a functional update 'setVolume(v => ...)' if you only need 'volume' in the 'setVolume' call.",["192"],"React Hook useEffect has a missing dependency: 'handlePlayPause'. Either include it or remove the dependency array.",["193"],["187"],["188"],"'Knob' is defined but never used.","'dummy' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'currSection' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'youtubeKey2' is assigned a value but never used.","'youtubeKey3' is assigned a value but never used.",["187"],["188"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [chosenVideoID, videoIDtoMP3]",{"range":"204","text":"205"},"Update the dependencies array to be: [name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",{"range":"206","text":"207"},"Add dependencies array: [clock]",{"range":"208","text":"209"},"Update the dependencies array to be: [url, volume]",{"range":"210","text":"211"},"Update the dependencies array to be: [handlePlayPause, isPlaying]",{"range":"212","text":"213"},[3877,3892],"[chosenVideoID, videoIDtoMP3]",[4175,4203],"[name, artists, duration_ms, createSearchQuery, getYoutubeVideo]",[1491,1491],", [clock]",[1849,1854],"[url, volume]",[2436,2447],"[handlePlayPause, isPlaying]"]