[{"/Users/parssa/projects/mixbot/src/index.js":"1","/Users/parssa/projects/mixbot/src/reportWebVitals.js":"2","/Users/parssa/projects/mixbot/src/App.js":"3","/Users/parssa/projects/mixbot/src/Mixbot.js":"4","/Users/parssa/projects/mixbot/src/frontend_components/UpdateMixBot.js":"5","/Users/parssa/projects/mixbot/src/helper_classes/Gateway.js":"6","/Users/parssa/projects/mixbot/src/TrackSelector.js":"7","/Users/parssa/projects/mixbot/src/frontend_components/Queue.js":"8","/Users/parssa/projects/mixbot/src/TrackPlayer.js":"9","/Users/parssa/projects/mixbot/src/Brain.js":"10","/Users/parssa/projects/mixbot/src/frontend_components/MixConfig.js":"11","/Users/parssa/projects/mixbot/src/helper_classes/Analyzer.js":"12","/Users/parssa/projects/mixbot/src/helper_classes/TrackFinder.js":"13","/Users/parssa/projects/mixbot/src/Deck.js":"14"},{"size":500,"mtime":1616172312804,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1616172312804,"results":"17","hashOfConfig":"16"},{"size":1592,"mtime":1616172312751,"results":"18","hashOfConfig":"16"},{"size":5603,"mtime":1616343303970,"results":"19","hashOfConfig":"16"},{"size":863,"mtime":1616172312802,"results":"20","hashOfConfig":"16"},{"size":2349,"mtime":1616341432721,"results":"21","hashOfConfig":"16"},{"size":6548,"mtime":1616345476117,"results":"22","hashOfConfig":"16"},{"size":792,"mtime":1616172312802,"results":"23","hashOfConfig":"16"},{"size":9998,"mtime":1616292873018,"results":"24","hashOfConfig":"16"},{"size":1153,"mtime":1616172312751,"results":"25","hashOfConfig":"16"},{"size":696,"mtime":1616346062442,"results":"26","hashOfConfig":"16"},{"size":8258,"mtime":1616343558818,"results":"27","hashOfConfig":"16"},{"size":4447,"mtime":1616342786337,"results":"28","hashOfConfig":"16"},{"size":17839,"mtime":1616288946692,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1mimcyz",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"32"},"/Users/parssa/projects/mixbot/src/index.js",[],["64","65"],"/Users/parssa/projects/mixbot/src/reportWebVitals.js",[],"/Users/parssa/projects/mixbot/src/App.js",[],"/Users/parssa/projects/mixbot/src/Mixbot.js",["66","67","68"],"import React, { useState } from 'react';\nimport TrackSelector from \"./TrackSelector\";\nimport TrackPlayer from \"./TrackPlayer\";\nimport QueueBox from \"./frontend_components/Queue\";\nimport Brain from \"./Brain\";\nimport axios from 'axios';\nimport MixConfig from './frontend_components/MixConfig';\n\nlet tracklist = [];\nlet upcomingSongs = [];\nlet alreadyPlayed = [];\n\nconst addSongRefURL = 'http://localhost:8080/addReference'\n\n// --- Global Functions ---\nexport function trackAlreadyIn(songID) { // todo converting this\n    for (const trackObj of tracklist) {\n        if (trackObj.songID === songID) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function loadTrack() {\n    let nextSong = null;\n    if (upcomingSongs.length !== 0) {\n        nextSong = upcomingSongs[0].body;\n        alreadyPlayed.push(nextSong);\n        upcomingSongs.shift();\n    }\n    return nextSong;\n}\n\nexport function nextSongInQueue() {\n    return upcomingSongs[0] || null;\n}\n\nexport function tracklistSize() {\n    return tracklist.length;\n}\n\nexport const thoughtType = {\n    NEUTRAL: 1,\n    SUCCESS: 2,\n    FAILURE: 3,\n    MIX: 4\n}\n\nlet currMixType = null;\n\nexport default function Mixbot() {\n    const [thoughts, setThoughts] = useState([]);\n    const [mixChosen, setMixChosen] = useState(false);\n    const [masterPlay, setMasterPlay] = useState(true);\n\n    function newThought(input, type = thoughtType.NEUTRAL) {\n        let shouldShow = true;\n        if (thoughts.length > 0 && thoughts[0].body === input) {\n            shouldShow = false;\n        }\n        setThoughts([{ id: \"THOUGHT-\" + thoughts.length, body: input, type: type, display: shouldShow }, ...thoughts]);\n    }\n\n    /**\n     * \n     * @param {*} songName: name of song\n     * @param {*} songArtists : array of artists of song\n     * @param {*} duration_ms: duration in ms \n     * @param {*} songURL: url to the temp reference link \n     * @param {*} analysis: raw spotify analysis \n     * @param {*} trackImage: img of album art \n     * @param {*} songID:  ID OF THE SPOTIFY SONG\n     * @param {*} videoID:  ID OF THE CORRESPONDING YT ID\n     * @param {boolean} fromDatabase: true if fetched yt id from database\n     */\n    async function addToQueue(songName, songArtists, duration_ms, songURL, analysis, trackImage, songID, videoID, fromDatabase) {\n        console.log(\"Called addToQueue for\", songName);\n        if (trackAlreadyIn(songID)) {\n            console.log(songName, \" was already in tracklist!\");\n            return;\n        }\n\n        if (analysis !== \"NOTFOUND\") {\n            if (!fromDatabase) {\n                console.log(\"Not in db yet, adding it...\");\n                let correctedArtists = [];\n                songArtists.forEach(artist => correctedArtists.push(artist.name));\n\n                let songRefEntry = {\n                    songID: songID, // spotify id\n                    videoID: videoID, // youtube videoID\n                    name: songName,\n                    artists: correctedArtists,\n                    duration: duration_ms,\n                }\n                // addSongRefDB(songRefEntry);\n            }\n        } else {\n            console.log(\"analysis was not found!\");\n        }\n\n        const newSong = {\n            songName: songName,\n            songArtists: songArtists,\n            duration_ms: duration_ms,\n            songURL: songURL,\n            songAnalysis: analysis,\n            trackImage: trackImage\n        }\n        console.log(\"added new song:\", fromDatabase)\n        // console.log(\">>>(MIXBOT): NEW SONG IS:\", newSong);\n        // console.log(\">>>(MIXBOT): ANALYSIS:\", analysis);\n        let packageSong = { id: \"tracklist\" + tracklist.length, body: newSong, songID: songID }\n        console.log(\"packaged song\");\n        // console.log(\">>>(MIXBOT): PACKAGED SONG:\", packageSong);\n        tracklist.push(packageSong);\n        \n        // console.log(\">>>(MIXBOT): ADDED TO TRACKLIST:\", tracklist);\n        upcomingSongs.push(packageSong);\n        console.log(\"pushed to tracklist and upcoming songs\");\n        // console.log(\">>>(MIXBOT): ADDED TO UPCOMING SONGS:\", upcomingSongs);\n        const think = `Added ${songName} to the tracklist`;\n        // console.log(\">>>(MIXBOT): ABOUT TO THINK:\", think);\n        newThought(think, thoughtType.NEUTRAL);\n        console.log(\"reached end of function\");\n    }\n\n    // function addSongRefDB(entry) {\n    //     axios.get(addSongRefURL, {\n    //         params: { data: entry }\n    //     });\n    // }\n\n    function choseMix(mixType) {\n        const think = \"Selected \" + mixType + \", beginning mix\";\n        newThought(think, thoughtType.SUCCESS);\n        currMixType = mixType;\n        setMixChosen(true);\n    }\n\n    function hitMasterPlay() {\n        console.log(\"hit master play\");\n        setMasterPlay(!masterPlay);\n        return masterPlay;\n    }\n\n    return (\n        <>\n            <div className=\"mixbot-body\">\n                <TrackPlayer newThought={newThought} masterPlay={masterPlay} />\n                <div className=\"mixbot-dropdowns\">\n                    <Brain decisions={thoughts} mixType={currMixType} />\n                    <QueueBox items={tracklist} />\n                    <MixConfig hitPause={hitMasterPlay} />\n                </div>\n            </div>\n            <div style={{ display: mixChosen ? 'none' : 'inherit' }}>\n                <TrackSelector\n                    addToQueue={addToQueue}\n                    addMoreSongs={upcomingSongs.length < 1}\n                    newThought={newThought}\n                    mixChosen={choseMix}\n                />\n            </div>\n\n        </>\n    )\n}\n","/Users/parssa/projects/mixbot/src/frontend_components/UpdateMixBot.js",[],"/Users/parssa/projects/mixbot/src/helper_classes/Gateway.js",[],"/Users/parssa/projects/mixbot/src/TrackSelector.js",["69"],"/Users/parssa/projects/mixbot/src/frontend_components/Queue.js",[],"/Users/parssa/projects/mixbot/src/TrackPlayer.js",["70","71","72","73","74","75","76"],"import React, { useEffect, useState } from 'react';\nimport Deck from \"./Deck\";\nimport './css_files/Queue.scss';\nimport { loadTrack, nextSongInQueue } from \"./Mixbot\";\n\nlet deck1startTime = 0;\nlet deck2startTime = 0;\n\nlet lastTrackSet = 0;\nlet mainTrack = 0;\n\nlet deck1lastBar = 0;\nlet deck2lastBar = 0;\n\nlet deckOneGlow = 9;\nlet deckTwoGlow = 9;\n\nlet equalizedGainVal = -10;\n\nexport default function TrackPlayer({ newThought, masterPlay }) {\n    const [clock, setClock] = useState();\n\n    const [deck1Song, setDeck1Song] = useState('');\n    const [deck2Song, setDeck2Song] = useState('');\n\n    const [deck1BPM, setDeck1BPM] = useState(0);\n    const [deck2BPM, setDeck2BPM] = useState(0);\n\n    const [deck1playback, setDeck1playback] = useState(1);\n    const [deck2playback, setDeck2playback] = useState(1);\n\n    const [deck1prepared, setDeck1prepared] = useState(false);\n    const [deck2prepared, setDeck2prepared] = useState(false);\n\n    const [deck1remove, setDeck1remove] = useState(false);\n    const [deck2remove, setDeck2remove] = useState(false);\n\n    const [deck1Playing, setDeck1Playing] = useState(false);\n    const [deck2Playing, setDeck2Playing] = useState(false);\n\n    const [deck1offset, setDeck1offset] = useState(0);\n    const [deck2offset, setDeck2offset] = useState(0);\n\n    // const [deck1gain, setDeck1Gain] = useState(null); // actual volumes in db\n    // const [deck2gain, setDeck2Gain] = useState(null);\n\n    const [deck1vol, setdeck1vol] = useState(1); // relative vol 0 -1\n    const [deck2vol, setdeck2vol] = useState(1);\n\n    useEffect(() => {\n        if (!clock) {\n            let newClock = new AudioContext();\n            setClock(newClock);\n        } \n        \n        if (Math.random() > 0.5) {\n            deckOneGlow += 10;\n            if (deckOneGlow >= 360) deckOneGlow = 0;\n        } else {\n            deckTwoGlow += 10;\n            if (deckTwoGlow >= 360) deckTwoGlow = 0;\n        }\n    })\n\n    useEffect(() => {\n        function LoadTrack() {\n            if (nextSongInQueue() !== null) {\n                console.log(\"next song in queue was not null\");\n                if ((deck1BPM == 0) && (deck1Song == '')) {\n                    loadTrackA();\n                } else if ((deck2BPM == 0) && (deck2Song == '')) {\n                    loadTrackB();\n                }\n            } else {\n                console.log(\"got next song in queue to be null\");\n            }\n        }\n        LoadTrack();\n    })\n\n    function loadTrackA() {\n        let newSong = loadTrack();\n        setDeck1prepared(false);\n        setDeck1Playing(false);\n        setDeck1remove(false);\n        if (newSong !== null) {\n            if (!newSong.songAnalysis.analysis) {\n                console.log(\"CASE A\", newSong);\n            } else {\n                console.log(\"CASE B\", newSong);\n            }\n            setDeck1BPM(Math.round(newSong.songAnalysis.analysis.tempo)) // terribly sus\n            let newvol = (newSong.songAnalysis.analysis.loudness / equalizedGainVal).toPrecision(5);\n            console.log(\"DECK A NEW VOLUME >>>>>>>>>>>>>>>>\", newvol);\n            setdeck1vol(newvol);\n            if (deck2Song === '') {\n                setDeck1playback(1);\n            } else {\n                if (deck2BPM !== 0) {\n                    let ratioPB = (deck2BPM / newSong.songAnalysis.analysis.tempo).toPrecision(5);\n                    setDeck1playback(ratioPB);\n                } else {\n                    setDeck1playback(1);\n                }\n            }\n            let think = \"Put \" + newSong.songName + \" on Deck A\";\n            newThought(think);\n            setDeck1Song(newSong);\n        }\n    }\n\n    function loadTrackB() {\n        let newSong = loadTrack();\n        setDeck2prepared(false);\n        setDeck2Playing(false);\n        setDeck2remove(false);\n        if (newSong !== null) {\n            \n\n            // EITHER IS newSong.songAnalysis || newSOng.songAnalysis.analysis\n            if (!newSong.songAnalysis.analysis) {\n                console.log(\"CASE A\", newSong);\n            } else {\n                console.log(\"CASE B\", newSong);\n            }\n\n            setDeck2BPM(Math.round(newSong.songAnalysis.analysis.tempo)) // terribly sus\n            let newvol = (newSong.songAnalysis.analysis.loudness / equalizedGainVal).toPrecision(5);\n            // console.log(\"DECK B NEW VOLUME >>>>>>>>>>>>>>>>\", newvol);\n            setdeck2vol(newvol);\n\n            if (deck1Song === '') {\n                setDeck2playback(1);\n            } else {\n                if (deck1BPM !== 0) {\n                    let ratio = (deck1BPM / Math.round(newSong.songAnalysis.analysis.tempo)).toPrecision(5);\n                    setDeck2playback(ratio);\n                } else {\n                    setDeck2playback(1);\n                }\n            }\n            let think = \"Put \" + newSong.songName + \" on Deck B\";\n            newThought(think);\n            setDeck2Song(newSong)\n        } else {\n            console.log(\"[WARNING] new song was null\");\n        }\n    }\n\n    function deckOneReady() {\n        if (!deck1prepared) {\n            setDeck1prepared(true);\n            if (!deck2Playing) {\n                setDeck1Playing(true);\n            }\n        }\n    }\n\n    function deckTwoReady() {\n        if (!deck2prepared) {\n            setDeck2prepared(true);\n            if (!deck1Playing) {\n                setDeck2Playing(true);\n            }\n        }\n    }\n\n    function playTrackTwo() {\n        if (deck2prepared) {\n            setDeck2Playing(true);\n            setDeck2prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 2;\n                mainTrack = 1;\n            }\n        }\n    }\n\n    function playTrackOne() {\n        if (deck1prepared) {\n            setDeck1Playing(true);\n            setDeck1prepared(false);\n            if (lastTrackSet === 0) {\n                lastTrackSet = 1;\n                mainTrack = 1;\n            }\n\n        }\n    }\n\n    function hitBarD1() {\n        deck1lastBar = clock.currentTime;\n        if (deck2Playing) {\n            setDeck1offset(deck2lastBar - deck1lastBar);\n        }\n    }\n\n    function hitBarD2() {\n        deck2lastBar = clock.currentTime;\n        if (deck1Playing) {\n            setDeck2offset(deck1lastBar - deck2lastBar);\n        }\n    }\n\n    function changeTrackA() {\n        mainTrack = 2;\n        setDeck2playback(1);\n        loadTrackA();\n    }\n\n    function changeTrackB() {\n        mainTrack = 1;\n        setDeck1playback(1);\n        loadTrackB();\n    }\n\n    function takeOutA() {\n        if (deck1Playing) setDeck1remove(true);\n        \n    }\n\n    function takeOutB() {\n        if (deck2Playing) setDeck2remove(true);\n    }\n\n    return (\n        <>\n            <div className={\"djboard\"}>\n                <div className={\"boardpanel\"} style={deck1Playing ? { boxShadow: `0 3px 100px hsla(${deckOneGlow}, 100%, 64%, 0.302)` } : { boxShadow: `0 0 0 hsla(${deckOneGlow}, 100%, 64%, 0.302)` }}>\n                    <h3>DECK A</h3>\n                    {deck1Song !== '' && <Deck\n                        \n                        thisSong={deck1Song.songURL}\n                        songName={deck1Song.songName}\n                        songArtist={deck1Song.songArtists[0].name}\n                        songImage={deck1Song.trackImage}\n                        songAnalysis={deck1Song.songAnalysis}\n                        \n                        playbackRate={deck1playback}\n                        prepared={deckOneReady}\n                        play={deck1Playing}\n                        startTime={deck1startTime}\n                        playOtherTrack={playTrackTwo}\n                        hitBar={hitBarD1}\n                        \n                        offset={deck1offset}\n                        deckName={\"Deck A\"}\n                        finished={changeTrackA}\n                        recommendedVolume={1}\n                        shouldSync={mainTrack !== 1}\n                        otherReady={deckTwoReady}\n                        waveformID={\"waveformA\"}\n                        bpm={deck1BPM}\n                        newThought={newThought}\n                        shouldRemove={deck1remove}\n                        removeOther={takeOutB}\n                        otherPlaying={deck2Playing}\n\n                        masterPlay={masterPlay}\n                    />\n                    }\n\n                </div>\n                <div className={\"boardpanel\"} style={deck2Playing ? { boxShadow: `0 3px 100px hsla(${deckTwoGlow}, 100%, 64%, 0.302)` } : { boxShadow: `0 0 0 hsla(${deckTwoGlow}, 100%, 64%, 0.302)` }}>\n                    <h3 style={{ textAlign: 'right' }}>DECK B</h3>\n                    {deck2Song !== '' && <Deck\n                        thisSong={deck2Song.songURL}\n                        songName={deck2Song.songName}\n                        songArtist={deck2Song.songArtists[0].name}\n                        songImage={deck2Song.trackImage}\n                        songAnalysis={deck2Song.songAnalysis}\n                        \n                        playbackRate={deck2playback}\n                        prepared={deckTwoReady}\n                        play={deck2Playing}\n                        startTime={deck2startTime}\n                        playOtherTrack={playTrackOne}\n                        hitBar={hitBarD2}\n                        offset={deck2offset}\n                        deckName={\"Deck B\"}\n                        finished={changeTrackB}\n                        recommendedVolume={1}\n                        shouldSync={mainTrack !== 2}\n                        otherReady={deckOneReady}\n                        waveformID={\"waveformB\"}\n                        bpm={deck2BPM}\n                        newThought={newThought}\n                        shouldRemove={deck2remove}\n                        removeOther={takeOutA}\n                        otherPlaying={deck1Playing}\n\n                        masterPlay={masterPlay}\n                    />}\n                </div>\n            </div>\n        </>\n    );\n}","/Users/parssa/projects/mixbot/src/Brain.js",[],"/Users/parssa/projects/mixbot/src/frontend_components/MixConfig.js",[],"/Users/parssa/projects/mixbot/src/helper_classes/Analyzer.js",[],["77","78"],"/Users/parssa/projects/mixbot/src/helper_classes/TrackFinder.js",["79","80"],"import { useEffect, useState } from 'react';\nimport { Gateway } from './Gateway';\nconst liveServerBase = \"https://stark-reef-17924.herokuapp.com/\";\nlet gateway = new Gateway();\n/**\n * This class handles finding a track based on song name, artists, and duration\n * and calls the { foundSong } prop when a song has been found.\n */\n\n\nlet lastChosenID = \"\";\nlet fromDatabase = false;\nlet intervalCall;\nlet waitingForDownload = false;\n\nexport default function TrackFinder({ trackDetail, foundSong, cantFind }) {\n    const [chosenVideoID, setChosenVideoID] = useState(\"\");\n    const [songPath, setSongPath] = useState(\"\");\n\n\n    function createSearchQuery() {\n        let artistNames = [];\n        trackDetail.artists.forEach(e => {\n            const thisName = e.name;\n            if (thisName) {\n                artistNames.push(thisName)\n            }\n        });\n        let searchQuery = trackDetail.name + \" by \" + artistNames[0];\n        return searchQuery;\n    }\n\n\n    async function videosSearch(search) {\n        const response = await gateway.getYoutubeList(search, trackDetail.duration_ms)\n        return response;\n    }\n\n    /**\n     * Searches YouTube for song using search query, breaks when found is song\n     * @param searchQuery\n     * @returns {Promise<void>}\n     */\n    async function getYoutubeVideo(searchQuery) {\n        videosSearch(searchQuery).then(async e => {\n            if (e.data) {\n                setChosenVideoID(e.data);\n            } else {\n                let whitelistObj = {\n                    songID: trackDetail.id,\n                    songName: trackDetail.name,\n                    songArtists: trackDetail.artists,\n                    expectedDuration: trackDetail.duration_ms,\n                }\n                await gateway.addToWhitelist(whitelistObj);\n                cantFind(false);\n            }\n        })\n    }\n\n    /**\n     * This effect triggers when the chosenVideoID is\n     * found, and then get the URL for mp3 download\n     *\n     * Since this effect gets called over once for the\n     * same video being found sometimes, it will not\n     * convert the video to mp3 if it has already been\n     * called once for this current song\n     * >> “ \"lastChosenID === \"\" ”\n     */\n    useEffect(() => {\n        if (chosenVideoID && lastChosenID === \"\") {\n            lastChosenID = chosenVideoID;\n            videoIDtoMP3(chosenVideoID);\n        }\n    }, [chosenVideoID])\n\n    useEffect(() => {\n        async function findYoutubeID() {\n            const result = await gateway.checkReferenceDB(trackDetail.id);\n            lastChosenID = \"\";\n            if (result === \"\") {\n                const whitelistResult = await gateway.checkWhitelistDB(trackDetail.id);\n                if (whitelistResult === \"\") {\n                    fromDatabase = false;\n                    const search = createSearchQuery();\n                    await getYoutubeVideo(search);\n                } else {\n                    cantFind(true);\n                }\n            } else {\n                fromDatabase = true;\n                setChosenVideoID(result.videoID);\n            }\n        }\n        if (trackDetail) findYoutubeID();\n    }, [trackDetail]);\n\n    async function videoIDtoMP3(videoID) {\n        // let recievedPath = null;\n        gateway.getAudioPath(videoID).then(res => {\n            setSongPath(liveServerBase + videoID + \".mp3\");\n        })\n    }\n\n    useEffect(() => {\n        if (songPath !== \"\" && !intervalCall) {\n            console.log(\"calling the interval\");\n            intervalCall = setInterval(async function () {\n                let res = await doesFileExist(chosenVideoID);\n                if (res) {\n                    submitSong();\n                }\n            }, 7000)\n        } else {\n            console.log(\"didn't call the interval\", songPath, intervalCall);\n        }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [songPath]);\n\n    function submitSong() {\n        console.log(\"clearing the interval!\");\n        clearInterval(intervalCall);\n        intervalCall = null;\n        setSongPath(\"\");\n        foundSong(trackDetail.name, trackDetail.artists, trackDetail.duration_ms, songPath, trackDetail.id, trackDetail.album.images[1], chosenVideoID, fromDatabase); // ! CHANGED THIS FROM PARAM TO CHOSENVIDEOID\n    }\n    return null;\n}\n\n\nasync function doesFileExist(videoID) {\n    let res = await gateway.getAudioLoaded(videoID);\n    return res.isLoaded;\n}","/Users/parssa/projects/mixbot/src/Deck.js",["81","82","83","84","85","86","87","88","89","90","91"],"import React, { Component } from 'react';\nimport WaveSurfer from 'wavesurfer.js';\nimport RegionPlugin from 'wavesurfer.js/dist/plugin/wavesurfer.regions.min.js';\nimport './css_files/Deck.scss';\nimport { SectionType } from './helper_classes/Analyzer';\nimport { thoughtType } from './Mixbot';\n\nlet xhr = { cache: 'default', mode: 'cors', method: 'GET', credentials: 'same-origin', redirect: 'follow', referrer: 'client', headers: [{ 'Access-Control-Allow-Origin': '*' }] };\nlet isMasterPaused = false;\n\nexport default class Deck extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pos: 0,\n            locked: false,\n            scheduledDemise: false,\n            currSec: \"NOT PLAYING\",\n            playing: false,\n            trackName: this.props.songName,\n            trackArtist: this.props.songArtist,\n            audioCtx: new AudioContext(),\n            audioSettings: {\n                gain: 1,\n                lowpassF: 11000,\n                highpassF: 0,\n                high: 1,\n                mid: 1,\n                low: 1,\n                playbackRate: this.props.playbackRate\n            },\n            currSectionAnalysis: {\n                begin: NaN,\n                endpoint: NaN,\n                comparisonLoudness: NaN,\n                differential: NaN,\n                sectionConfidence: NaN,\n                conformedBegin: NaN,\n                conformedEnd: NaN,\n                oBegin: NaN,\n                oEnd: NaN,\n                sectionColor: `rgb(255,255,255)`,\n                goodForMix: false,\n                isBest: false\n            },\n            startingPos: 0\n        };\n\n        this.waveSurferOptions = {\n            container: `#${this.props.waveformID}`,\n            waveColor: \"#ffffff\",\n            cursorColor: \"tomato\",\n            hideScrollbar: true,\n            normalize: true,\n            height: 70,\n            barWidth: 1,\n            barHeight: 0.5, // the height of the wave\n            barRadius: 2,\n            plugins: [\n                RegionPlugin.create(),\n            ],\n            xhr: xhr\n        }\n\n        this.lastAdjustTime = 0;\n        this.synced = false;\n        this.fadingOut = false;\n        this.fadingIn = false;\n        this.totalOffset = 0;\n        this.numSuccessful = 0;\n        this.numDropsPassed = 0;\n\n        this.playPause = this.playPause.bind(this);\n        this.fadeOutSong = this.fadeOutSong.bind(this);\n        this.changeFilter = this.changeFilter.bind(this);\n        this.changeGain = this.changeGain.bind(this);\n        this.reconnectAudio = this.reconnectAudio.bind(this);\n        this.handlePosChange = this.handlePosChange.bind(this);\n        this.takeOutSong = this.takeOutSong.bind(this);\n        this.normalizePlayback = this.normalizePlayback.bind(this);\n    }\n\n    componentDidMount() {\n        this.waveform = WaveSurfer.create(this.waveSurferOptions);\n\n        this.waveform.on('error', e => {\n            console.error(e);\n        })     \n        this.waveform.load(this.props.thisSong);\n        this.waveform.setPlaybackRate(this.props.playbackRate);\n        this.reconnectAudio();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.waveform.getVolume() < this.props.recommendedVolume &&\n            !this.fadingIn &&\n            !this.fadingOut) {\n            this.waveform.setVolume(this.props.recommendedVolume);\n        }\n        \n        if (this.props.thisSong !== prevProps.thisSong) { \n            this.waveform.pause();\n            this.synced = false;\n            this.numSuccessful = 0;\n            this.totalOffset = 0;\n            this.fadingOut = false;\n            this.fadingIn = false;\n            this.numDropsPassed = 0;\n\n            this.waveform.destroy();\n            this.waveform = WaveSurfer.create(this.waveSurferOptions);\n            \n            this.waveform.on('error', e => {\n                //console.log(\"hit error:\", e);\n            })\n\n            let dummy = new Audio(this.props.thisSong);\n            this.waveform.load(dummy.src);\n            this.waveform.setPlaybackRate(this.props.playbackRate);\n\n            this.reconnectAudio();\n        } \n\n        if (this.state.audioCtx.state !== 'suspended') {\n            if (this.props.play !== this.waveform.isPlaying()) {\n                if (!this.props.play) {\n                    //console.log(\"~~~ SHOULD BE PAUSED NGL ~~~\");\n                    this.waveform.pause();\n                } else {\n                    this.playPause();\n                }\n            }\n        }\n\n        if (!this.props.shouldSync) {\n            this.synced = true; // If this is the main track, don't sync it\n            this.normalizePlayback();\n            \n        }\n\n        // If the offset between tracks is under 0.1 seconds and this is playing, this track is succesful\n        // ! The margin of error of 0.1s is needed due to timing issues with WebAudio\n        if (Math.abs(this.props.offset) < 0.1 && this.waveform.isPlaying()) {\n            this.numSuccessful++;\n            if (Math.abs(this.props.offset) < 0.05) this.numSuccessful++;\n            if (this.numSuccessful >= 3) {\n                this.synced = true;\n            }\n        }\n\n        /**\n         * IF:\n         *  1) New offset passed in\n         *  2) It has been over 5 seconds since the last time it was adjusted\n         */\n        if (this.props.offset !== prevProps.offset &&\n            this.waveform.getCurrentTime() - this.lastAdjustTime > 5 &&\n            Math.abs(this.props.offset) >= 0.05 &&\n            !this.synced) {\n            this.numSuccessful = 0;\n            //console.log(this.props.deckName, \"-> about to sync\");\n            if (this.waveform.getCurrentTime() + this.props.offset > 1 && this.props.offset != 0) {\n                this.lastAdjustTime = this.waveform.getCurrentTime();\n                let adjustedOffset = this.props.offset;\n                this.totalOffset = this.props.offset;\n                let desiredTime = this.waveform.getCurrentTime() + this.props.offset;\n                this.waveform.pause();\n                this.waveform.skip(adjustedOffset);\n                this.waveform.playPause();\n                //console.log(\"%%%   \", this.props.deckName, \" now we are at:\", this.waveform.getCurrentTime(), \"difference is:\", desiredTime - this.waveform.getCurrentTime(), \"offset diff:\", (this.props.offset - desiredTime - this.waveform.getCurrentTime()));\n            } else {\n                //console.log(this.props.deckName, \"-> didn't sync \");\n            }\n        }\n\n        if (this.props.shouldRemove && !this.fadingOut && !this.shouldSync && this.props.otherPlaying) {\n            this.takeOutSong();\n        }\n\n        if (this.props.masterPlay !== prevProps.masterPlay) {\n            if (this.props.masterPlay) {\n                this.waveform.pause();\n                isMasterPaused = true;\n            } else {\n                if (this.waveform.isPlaying() !== this.props.play) {\n                    this.waveform.play();\n                } else {\n                    isMasterPaused = false;\n                }\n            }\n        }\n    }\n\n    normalizePlayback() {\n        if (this.waveform.getPlaybackRate() !== 1) {\n            let newRate = lerp(this.waveform.getPlaybackRate(), 1, 0.1, this.props.deckName);\n            if (isFinite(newRate)) this.waveform.setVolume(newRate);\n            if (Math.abs(1 - this.waveform.getPlaybackRate()) < 0.1) this.waveform.setPlaybackRate(1);\n            else this.normalizePlayback();\n        }\n    }\n\n    reconnectAudio() {\n        // LOWPASS\n        let lowpass = this.waveform.backend.ac.createBiquadFilter();\n        lowpass.frequency.value = this.state.audioSettings.lowpassF || 11000;\n        lowpass.type = \"lowpass\";\n        lowpass.Q.value = 5;\n        this.setState({\n            lowpassNode: lowpass\n        });\n\n        // HIGHPASS\n        let highpass = this.waveform.backend.ac.createBiquadFilter();\n        highpass.frequency.value = this.state.audioSettings.highpassF || 0;\n        highpass.type = \"highpass\";\n        highpass.Q.value = 5;\n        this.setState({\n            highpassNode: highpass\n        });\n\n        // GAIN\n        let gain = this.waveform.backend.ac.createGain();\n        gain.value = this.state.audioSettings.gain || 0.01;\n        this.setState({\n            gainNode: gain\n        });\n        this.waveform.backend.setFilter(lowpass, highpass);\n        if (this.props.songAnalysis !== 'NOTFOUND') {\n            let analyzed = this.props.songAnalysis.analysis.songSections;\n            if (!analyzed) {\n                console.log(\"error!!\");\n                console.log(this.props);\n            }\n            if (!analyzed) {\n                console.log(\"NO ANALYZED!!\", this.props)\n            }\n            \n            analyzed.forEach(section => {\n                let region = {\n                    start: section.begin,\n                    end: section.endpoint,\n                    attributes: section.computed,\n                    data: section,\n                    color: section.sectionColor,\n                    drag: false,\n                    resize: false,\n                }\n                this.waveform.addRegion(region);\n            })\n\n            let bars = this.props.songAnalysis.analysis.bars;\n            bars.forEach(b => {\n                this.waveform.addRegion(b);\n            })\n            this.setState({\n                startingPos: this.props.songAnalysis.startPos\n            })\n        }\n        this.waveform.on('region-in', e => {\n            this.props.hitBar();\n            // console.log(\">>>> HIT BAR : DIFF\", e.data.computed.differential, \"COMPLOUD\", e.data.computed.comparisonLoudness);\n            if (e.data.computed.differential < 0) {\n                if (this.props.otherReady && (this.waveform.getCurrentTime() / this.waveform.getDuration() > 0.4)) {\n                    this.props.playOtherTrack();                                                 \n                    //console.log(this.props.deckName, \"good mixing spot\");\n                }\n            }\n            if (e.data.sectionType !== undefined) { // has data!\n                if (e.data.sectionType === SectionType.DROP) {\n                    this.numDropsPassed++;\n                }\n            }\n        })\n\n        this.waveform.on('region-out', e => {\n            let thisSection = e.data;\n            let computed = thisSection.computed;\n            if (computed) {\n                this.setState({\n                    currSec: thisSection.sectionType,\n                    currSectionAnalysis: {\n                        begin: thisSection.begin,\n                        endpoint: thisSection.endpoint,\n                        comparisonLoudness: computed.comparisonLoudness,\n                        differential: computed.differential,\n                        sectionConfidence: computed.sectionConfidence,\n                        conformedBegin: computed.comformedBegin,\n                        conformedEnd: computed.comformedEnd,\n                        oBegin: computed.oBegin,\n                        oEnd: computed.oEnd,\n                        sectionColor: thisSection.sectionColor,\n                        goodForMix: thisSection.goodForMix,\n                        isBest: thisSection.isBest,\n                        sizeComparison: thisSection.sizeComparison,\n                        is32: thisSection.is32\n                    }\n                })\n                //console.log(this.props.deckName, \" HAS FINISHED\", this.waveform.getCurrentTime() / this.waveform.getDuration(), \"OF ITS SONG\");\n                if (this.props.otherReady && (this.waveform.getCurrentTime() / this.waveform.getDuration() > 0.4)) {\n                    if ((thisSection.sectionType === SectionType.DROP && this.numDropsPassed > 0) || thisSection.sectionType === SectionType.COMEDOWN) {\n                        this.props.playOtherTrack();                                                 \n                    } else if (this.waveform.getCurrentTime() / this.waveform.getDuration() > 0.7) {\n                        this.props.playOtherTrack();\n                    }\n                }\n            } else {\n                this.props.hitBar();\n            }\n        });\n\n        this.waveform.on('ready', e => {\n            //console.log(\"------ READY TO GO! 1 ------\");\n            this.state.audioCtx.resume();\n            if (!this.waveform.isPlaying()) {\n                this.playPause();\n                this.props.prepared();\n            }\n            this.waveform.setVolume(0.01);\n        });\n\n        this.waveform.on('play', e => {\n            \n            if (this.props.play) {\n                // console.log(this.props.deckName, \" JUST STARTED PLAYING GONNA FADE IT IN NOW OK\");\n                if (isMasterPaused) {\n                    console.log(\"was a master pause\");\n                    isMasterPaused = false;\n                } else {\n                    this.waveform.setVolume(0.01);\n                    let think = \"Fading in \" + this.props.deckName;\n                    this.props.newThought(think, thoughtType.MIX);\n                    this.fadeInSong();\n                }\n            }\n            \n        })\n\n    }\n\n    takeOutSong() {\n        this.fadeOutSong();\n        let think = \"Fading out \" + this.props.deckName;\n        this.props.newThought(think, thoughtType.MIX);\n    }\n\n    playPause() {\n        // check if context is in suspended state (autoplay policy)\n        if (this.state.audioCtx.state === 'suspended') {\n            this.state.audioCtx.resume();\n\n        }\n        this.waveform.play(this.state.startingPos);\n        if (this.state.playing !== this.waveform.isPlaying()) {\n            this.setState({\n                playing: this.waveform.isPlaying()\n            });\n        }\n    }\n\n    changeFilter(amount) {\n        if (amount <= 14000) {\n            this.state.audioSettings.lowpassF = amount;\n            this.state.lowpassNode.frequency.value = amount;\n        } else if (amount >= 20000) {\n            let highpassAmount = amount - 20000;\n            this.state.audioSettings.highpassF = highpassAmount;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        } else {\n            this.state.audioSettings.lowpassF = 30000;\n            this.state.lowpassNode.frequency.value = this.state.audioSettings.lowpassF;\n            this.state.audioSettings.highpassF = 0;\n            this.state.highpassNode.frequency.value = this.state.audioSettings.highpassF;\n        }\n    }\n\n    changeGain(amount) {\n        this.setState({\n            audioSettings: {\n                gain: (amount / 100).toPrecision(2)\n            }\n        })\n    }\n\n    handlePosChange(e) {\n        this.setState({\n            pos: e\n        });\n    }\n\n    fadeOutSong() {\n        this.fadingOut = true;\n        this.waveform.setVolume(lerp(this.waveform.getVolume(), 0, Math.min(this.waveform.getVolume() / 3), 0.1, this.props.deckName));\n        this.state.lowpassNode.frequency.value -= (this.state.lowpassNode.frequency.value / 10);\n        if (this.waveform.getVolume() < 0.2) this.waveform.setVolume(this.waveform.getVolume() - 0.03);\n        if (this.waveform.getVolume() > 0.01) {\n            setTimeout(() => {\n                this.fadeOutSong();\n            }, 1000);\n        } else {\n            //console.log(\">>>>>>>   >>> \", this.props.deckName, \" FADED OUT_________\");\n            this.fadingOut = false;\n            this.waveform.setVolume(0);\n            this.waveform.pause();\n            this.props.finished();\n        }\n    }\n\n    fadeInSong() {\n        this.fadingIn = true;\n        let newVol = lerp(this.waveform.getVolume(), this.props.recommendedVolume, Math.min((this.waveform.getVolume()) / 4), 0.03, this.props.deckName);\n        if (isFinite(newVol)) {\n            if (newVol >= this.props.recommendedVolume) this.waveform.setVolume(this.props.recommendedVolume);\n            else this.waveform.setVolume(newVol);\n        }\n        \n        if (this.waveform.getVolume() < this.props.recommendedVolume - 0.05) {   // TODO TWEAK THIS BASED ON IF MAIN TRACK OR NOT\n            setTimeout(() => {\n                this.fadeInSong();\n            }, 1000);\n        } else {\n            //console.log(\">>>>>>>  !!!  >>> \", this.props.deckName, \" FADED IN_________!!!!\");\n            this.fadingIn = false;\n            this.waveform.setVolume(this.props.recommendedVolume);\n            this.props.removeOther();\n        }\n    }\n\n    skipSong() {\n        this.takeOutSong();\n        this.props.playOtherTrack();\n    }\n\n    render() {\n        return (\n            <>\n                <div className={\"deck\"}>\n                    \n                    <img src={this.props.songImage.url} alt=\"\" />\n                    <div className={\"deck-content\"}>\n                        <div className={\"deck-text\"}>\n                            {this.props.songName !== \"\" && <h2>{this.props.songName}</h2>}\n                            {this.props.songName !== \"\" && <h3>{this.props.songArtist}</h3>}\n                        </div>\n                        <div className={\"deck-text\"}>\n                            <h4>{this.props.bpm} BPM</h4>\n                            <button onClick={() => this.skipSong()}>SKIP SONG</button>\n                        </div>\n                        <div id={`${this.props.waveformID}`} />\n                    </div>\n                    \n                    {/* <Knob size={70} numTicks={70} degrees={260} min={0} max={100} value={50} color={true} onChange={this.changeGain} /> */}\n                    {/* <Knob size={70} numTicks={70} degrees={260} min={1000} max={30000} value={15000} color={true} onChange={this.changeFilter} /> */}\n                </div>\n            </>\n        );\n    }\n}\n\nfunction lerp(start, end, amt, deckname) {\n    return (1 - amt) * start + amt * end\n}\n\n",{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":6,"column":8,"nodeType":"98","messageId":"99","endLine":6,"endColumn":13},{"ruleId":"96","severity":1,"message":"100","line":13,"column":7,"nodeType":"98","messageId":"99","endLine":13,"endColumn":20},{"ruleId":"96","severity":1,"message":"101","line":90,"column":21,"nodeType":"98","messageId":"99","endLine":90,"endColumn":33},{"ruleId":"102","severity":1,"message":"103","line":88,"column":24,"nodeType":"98","endLine":88,"endColumn":35},{"ruleId":"96","severity":1,"message":"104","line":47,"column":12,"nodeType":"98","messageId":"99","endLine":47,"endColumn":20},{"ruleId":"96","severity":1,"message":"105","line":48,"column":12,"nodeType":"98","messageId":"99","endLine":48,"endColumn":20},{"ruleId":"102","severity":1,"message":"106","line":50,"column":5,"nodeType":"98","endLine":50,"endColumn":14,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":69,"column":31,"nodeType":"110","messageId":"111","endLine":69,"endColumn":33},{"ruleId":"108","severity":1,"message":"109","line":69,"column":51,"nodeType":"110","messageId":"111","endLine":69,"endColumn":53},{"ruleId":"108","severity":1,"message":"109","line":71,"column":38,"nodeType":"110","messageId":"111","endLine":71,"endColumn":40},{"ruleId":"108","severity":1,"message":"109","line":71,"column":58,"nodeType":"110","messageId":"111","endLine":71,"endColumn":60},{"ruleId":"92","replacedBy":"112"},{"ruleId":"94","replacedBy":"113"},{"ruleId":"96","severity":1,"message":"114","line":14,"column":5,"nodeType":"98","messageId":"99","endLine":14,"endColumn":23},{"ruleId":"102","severity":1,"message":"115","line":97,"column":8,"nodeType":"116","endLine":97,"endColumn":21,"suggestions":"117"},{"ruleId":"108","severity":1,"message":"118","line":162,"column":93,"nodeType":"110","messageId":"111","endLine":162,"endColumn":95},{"ruleId":"96","severity":1,"message":"119","line":166,"column":21,"nodeType":"98","messageId":"99","endLine":166,"endColumn":32},{"ruleId":"120","severity":1,"message":"121","line":363,"column":13,"nodeType":"122","endLine":363,"endColumn":37},{"ruleId":"120","severity":1,"message":"121","line":364,"column":13,"nodeType":"122","endLine":364,"endColumn":45},{"ruleId":"120","severity":1,"message":"121","line":367,"column":13,"nodeType":"122","endLine":367,"endColumn":37},{"ruleId":"120","severity":1,"message":"121","line":368,"column":13,"nodeType":"122","endLine":368,"endColumn":46},{"ruleId":"120","severity":1,"message":"121","line":370,"column":13,"nodeType":"122","endLine":370,"endColumn":37},{"ruleId":"120","severity":1,"message":"121","line":371,"column":13,"nodeType":"122","endLine":371,"endColumn":45},{"ruleId":"120","severity":1,"message":"121","line":372,"column":13,"nodeType":"122","endLine":372,"endColumn":37},{"ruleId":"120","severity":1,"message":"121","line":373,"column":13,"nodeType":"122","endLine":373,"endColumn":46},{"ruleId":"120","severity":1,"message":"121","line":394,"column":9,"nodeType":"122","endLine":394,"endColumn":41},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'addSongRefURL' is assigned a value but never used.","'songRefEntry' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","'deck1vol' is assigned a value but never used.","'deck2vol' is assigned a value but never used.","React Hook useEffect contains a call to 'setClock'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [clock] as a second argument to the useEffect Hook.",["125"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["123"],["124"],"'waitingForDownload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cantFind', 'createSearchQuery', and 'getYoutubeVideo'. Either include them or remove the dependency array. If 'cantFind' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["126"],"Expected '!==' and instead saw '!='.","'desiredTime' is assigned a value but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Add dependencies array: [clock]",{"range":"131","text":"132"},"Update the dependencies array to be: [cantFind, createSearchQuery, getYoutubeVideo, trackDetail]",{"range":"133","text":"134"},[1925,1925],", [clock]",[3166,3179],"[cantFind, createSearchQuery, getYoutubeVideo, trackDetail]"]